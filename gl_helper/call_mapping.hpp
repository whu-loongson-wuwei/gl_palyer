/*this file is generated by gen_call_table.py.please do not modify it manaully.*/
#include<GL/glxext.h>
#include"function.h"

void *func = nullptr

if(strcmp("glNewList",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNewList");
  (PFNGLNEWLISTPROC)func()
  continue;
}

if(strcmp("glEndList",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEndList");
  (PFNGLENDLISTPROC)func()
  continue;
}

if(strcmp("glCallList",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCallList");
  (PFNGLCALLLISTPROC)func()
  continue;
}

if(strcmp("glCallLists",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCallLists");
  (PFNGLCALLLISTSPROC)func()
  continue;
}

if(strcmp("glDeleteLists",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteLists");
  (PFNGLDELETELISTSPROC)func()
  continue;
}

if(strcmp("glGenLists",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenLists");
  (PFNGLGENLISTSPROC)func()
  continue;
}

if(strcmp("glListBase",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glListBase");
  (PFNGLLISTBASEPROC)func()
  continue;
}

if(strcmp("glBegin",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBegin");
  (PFNGLBEGINPROC)func()
  continue;
}

if(strcmp("glBitmap",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBitmap");
  (PFNGLBITMAPPROC)func()
  continue;
}

if(strcmp("glColor3b",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3b");
  (PFNGLCOLOR3BPROC)func()
  continue;
}

if(strcmp("glColor3bv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3bv");
  (PFNGLCOLOR3BVPROC)func()
  continue;
}

if(strcmp("glColor3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3d");
  (PFNGLCOLOR3DPROC)func()
  continue;
}

if(strcmp("glColor3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3dv");
  (PFNGLCOLOR3DVPROC)func()
  continue;
}

if(strcmp("glColor3f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3f");
  (PFNGLCOLOR3FPROC)func()
  continue;
}

if(strcmp("glColor3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3fv");
  (PFNGLCOLOR3FVPROC)func()
  continue;
}

if(strcmp("glColor3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3i");
  (PFNGLCOLOR3IPROC)func()
  continue;
}

if(strcmp("glColor3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3iv");
  (PFNGLCOLOR3IVPROC)func()
  continue;
}

if(strcmp("glColor3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3s");
  (PFNGLCOLOR3SPROC)func()
  continue;
}

if(strcmp("glColor3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3sv");
  (PFNGLCOLOR3SVPROC)func()
  continue;
}

if(strcmp("glColor3ub",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3ub");
  (PFNGLCOLOR3UBPROC)func()
  continue;
}

if(strcmp("glColor3ubv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3ubv");
  (PFNGLCOLOR3UBVPROC)func()
  continue;
}

if(strcmp("glColor3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3ui");
  (PFNGLCOLOR3UIPROC)func()
  continue;
}

if(strcmp("glColor3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3uiv");
  (PFNGLCOLOR3UIVPROC)func()
  continue;
}

if(strcmp("glColor3us",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3us");
  (PFNGLCOLOR3USPROC)func()
  continue;
}

if(strcmp("glColor3usv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor3usv");
  (PFNGLCOLOR3USVPROC)func()
  continue;
}

if(strcmp("glColor4b",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4b");
  (PFNGLCOLOR4BPROC)func()
  continue;
}

if(strcmp("glColor4bv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4bv");
  (PFNGLCOLOR4BVPROC)func()
  continue;
}

if(strcmp("glColor4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4d");
  (PFNGLCOLOR4DPROC)func()
  continue;
}

if(strcmp("glColor4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4dv");
  (PFNGLCOLOR4DVPROC)func()
  continue;
}

if(strcmp("glColor4f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4f");
  (PFNGLCOLOR4FPROC)func()
  continue;
}

if(strcmp("glColor4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4fv");
  (PFNGLCOLOR4FVPROC)func()
  continue;
}

if(strcmp("glColor4i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4i");
  (PFNGLCOLOR4IPROC)func()
  continue;
}

if(strcmp("glColor4iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4iv");
  (PFNGLCOLOR4IVPROC)func()
  continue;
}

if(strcmp("glColor4s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4s");
  (PFNGLCOLOR4SPROC)func()
  continue;
}

if(strcmp("glColor4sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4sv");
  (PFNGLCOLOR4SVPROC)func()
  continue;
}

if(strcmp("glColor4ub",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4ub");
  (PFNGLCOLOR4UBPROC)func()
  continue;
}

if(strcmp("glColor4ubv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4ubv");
  (PFNGLCOLOR4UBVPROC)func()
  continue;
}

if(strcmp("glColor4ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4ui");
  (PFNGLCOLOR4UIPROC)func()
  continue;
}

if(strcmp("glColor4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4uiv");
  (PFNGLCOLOR4UIVPROC)func()
  continue;
}

if(strcmp("glColor4us",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4us");
  (PFNGLCOLOR4USPROC)func()
  continue;
}

if(strcmp("glColor4usv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4usv");
  (PFNGLCOLOR4USVPROC)func()
  continue;
}

if(strcmp("glEdgeFlag",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEdgeFlag");
  (PFNGLEDGEFLAGPROC)func()
  continue;
}

if(strcmp("glEdgeFlagv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEdgeFlagv");
  (PFNGLEDGEFLAGVPROC)func()
  continue;
}

if(strcmp("glEnd",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEnd");
  (PFNGLENDPROC)func()
  continue;
}

if(strcmp("glIndexd",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexd");
  (PFNGLINDEXDPROC)func()
  continue;
}

if(strcmp("glIndexdv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexdv");
  (PFNGLINDEXDVPROC)func()
  continue;
}

if(strcmp("glIndexf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexf");
  (PFNGLINDEXFPROC)func()
  continue;
}

if(strcmp("glIndexfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexfv");
  (PFNGLINDEXFVPROC)func()
  continue;
}

if(strcmp("glIndexi",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexi");
  (PFNGLINDEXIPROC)func()
  continue;
}

if(strcmp("glIndexiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexiv");
  (PFNGLINDEXIVPROC)func()
  continue;
}

if(strcmp("glIndexs",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexs");
  (PFNGLINDEXSPROC)func()
  continue;
}

if(strcmp("glIndexsv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexsv");
  (PFNGLINDEXSVPROC)func()
  continue;
}

if(strcmp("glNormal3b",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3b");
  (PFNGLNORMAL3BPROC)func()
  continue;
}

if(strcmp("glNormal3bv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3bv");
  (PFNGLNORMAL3BVPROC)func()
  continue;
}

if(strcmp("glNormal3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3d");
  (PFNGLNORMAL3DPROC)func()
  continue;
}

if(strcmp("glNormal3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3dv");
  (PFNGLNORMAL3DVPROC)func()
  continue;
}

if(strcmp("glNormal3f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3f");
  (PFNGLNORMAL3FPROC)func()
  continue;
}

if(strcmp("glNormal3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3fv");
  (PFNGLNORMAL3FVPROC)func()
  continue;
}

if(strcmp("glNormal3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3i");
  (PFNGLNORMAL3IPROC)func()
  continue;
}

if(strcmp("glNormal3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3iv");
  (PFNGLNORMAL3IVPROC)func()
  continue;
}

if(strcmp("glNormal3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3s");
  (PFNGLNORMAL3SPROC)func()
  continue;
}

if(strcmp("glNormal3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3sv");
  (PFNGLNORMAL3SVPROC)func()
  continue;
}

if(strcmp("glRasterPos2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos2d");
  (PFNGLRASTERPOS2DPROC)func()
  continue;
}

if(strcmp("glRasterPos2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos2dv");
  (PFNGLRASTERPOS2DVPROC)func()
  continue;
}

if(strcmp("glRasterPos2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos2f");
  (PFNGLRASTERPOS2FPROC)func()
  continue;
}

if(strcmp("glRasterPos2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos2fv");
  (PFNGLRASTERPOS2FVPROC)func()
  continue;
}

if(strcmp("glRasterPos2i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos2i");
  (PFNGLRASTERPOS2IPROC)func()
  continue;
}

if(strcmp("glRasterPos2iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos2iv");
  (PFNGLRASTERPOS2IVPROC)func()
  continue;
}

if(strcmp("glRasterPos2s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos2s");
  (PFNGLRASTERPOS2SPROC)func()
  continue;
}

if(strcmp("glRasterPos2sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos2sv");
  (PFNGLRASTERPOS2SVPROC)func()
  continue;
}

if(strcmp("glRasterPos3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos3d");
  (PFNGLRASTERPOS3DPROC)func()
  continue;
}

if(strcmp("glRasterPos3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos3dv");
  (PFNGLRASTERPOS3DVPROC)func()
  continue;
}

if(strcmp("glRasterPos3f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos3f");
  (PFNGLRASTERPOS3FPROC)func()
  continue;
}

if(strcmp("glRasterPos3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos3fv");
  (PFNGLRASTERPOS3FVPROC)func()
  continue;
}

if(strcmp("glRasterPos3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos3i");
  (PFNGLRASTERPOS3IPROC)func()
  continue;
}

if(strcmp("glRasterPos3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos3iv");
  (PFNGLRASTERPOS3IVPROC)func()
  continue;
}

if(strcmp("glRasterPos3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos3s");
  (PFNGLRASTERPOS3SPROC)func()
  continue;
}

if(strcmp("glRasterPos3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos3sv");
  (PFNGLRASTERPOS3SVPROC)func()
  continue;
}

if(strcmp("glRasterPos4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos4d");
  (PFNGLRASTERPOS4DPROC)func()
  continue;
}

if(strcmp("glRasterPos4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos4dv");
  (PFNGLRASTERPOS4DVPROC)func()
  continue;
}

if(strcmp("glRasterPos4f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos4f");
  (PFNGLRASTERPOS4FPROC)func()
  continue;
}

if(strcmp("glRasterPos4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos4fv");
  (PFNGLRASTERPOS4FVPROC)func()
  continue;
}

if(strcmp("glRasterPos4i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos4i");
  (PFNGLRASTERPOS4IPROC)func()
  continue;
}

if(strcmp("glRasterPos4iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos4iv");
  (PFNGLRASTERPOS4IVPROC)func()
  continue;
}

if(strcmp("glRasterPos4s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos4s");
  (PFNGLRASTERPOS4SPROC)func()
  continue;
}

if(strcmp("glRasterPos4sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRasterPos4sv");
  (PFNGLRASTERPOS4SVPROC)func()
  continue;
}

if(strcmp("glRectd",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRectd");
  (PFNGLRECTDPROC)func()
  continue;
}

if(strcmp("glRectdv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRectdv");
  (PFNGLRECTDVPROC)func()
  continue;
}

if(strcmp("glRectf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRectf");
  (PFNGLRECTFPROC)func()
  continue;
}

if(strcmp("glRectfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRectfv");
  (PFNGLRECTFVPROC)func()
  continue;
}

if(strcmp("glRecti",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRecti");
  (PFNGLRECTIPROC)func()
  continue;
}

if(strcmp("glRectiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRectiv");
  (PFNGLRECTIVPROC)func()
  continue;
}

if(strcmp("glRects",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRects");
  (PFNGLRECTSPROC)func()
  continue;
}

if(strcmp("glRectsv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRectsv");
  (PFNGLRECTSVPROC)func()
  continue;
}

if(strcmp("glTexCoord1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord1d");
  (PFNGLTEXCOORD1DPROC)func()
  continue;
}

if(strcmp("glTexCoord1dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord1dv");
  (PFNGLTEXCOORD1DVPROC)func()
  continue;
}

if(strcmp("glTexCoord1f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord1f");
  (PFNGLTEXCOORD1FPROC)func()
  continue;
}

if(strcmp("glTexCoord1fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord1fv");
  (PFNGLTEXCOORD1FVPROC)func()
  continue;
}

if(strcmp("glTexCoord1i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord1i");
  (PFNGLTEXCOORD1IPROC)func()
  continue;
}

if(strcmp("glTexCoord1iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord1iv");
  (PFNGLTEXCOORD1IVPROC)func()
  continue;
}

if(strcmp("glTexCoord1s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord1s");
  (PFNGLTEXCOORD1SPROC)func()
  continue;
}

if(strcmp("glTexCoord1sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord1sv");
  (PFNGLTEXCOORD1SVPROC)func()
  continue;
}

if(strcmp("glTexCoord2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord2d");
  (PFNGLTEXCOORD2DPROC)func()
  continue;
}

if(strcmp("glTexCoord2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord2dv");
  (PFNGLTEXCOORD2DVPROC)func()
  continue;
}

if(strcmp("glTexCoord2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord2f");
  (PFNGLTEXCOORD2FPROC)func()
  continue;
}

if(strcmp("glTexCoord2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord2fv");
  (PFNGLTEXCOORD2FVPROC)func()
  continue;
}

if(strcmp("glTexCoord2i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord2i");
  (PFNGLTEXCOORD2IPROC)func()
  continue;
}

if(strcmp("glTexCoord2iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord2iv");
  (PFNGLTEXCOORD2IVPROC)func()
  continue;
}

if(strcmp("glTexCoord2s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord2s");
  (PFNGLTEXCOORD2SPROC)func()
  continue;
}

if(strcmp("glTexCoord2sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord2sv");
  (PFNGLTEXCOORD2SVPROC)func()
  continue;
}

if(strcmp("glTexCoord3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord3d");
  (PFNGLTEXCOORD3DPROC)func()
  continue;
}

if(strcmp("glTexCoord3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord3dv");
  (PFNGLTEXCOORD3DVPROC)func()
  continue;
}

if(strcmp("glTexCoord3f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord3f");
  (PFNGLTEXCOORD3FPROC)func()
  continue;
}

if(strcmp("glTexCoord3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord3fv");
  (PFNGLTEXCOORD3FVPROC)func()
  continue;
}

if(strcmp("glTexCoord3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord3i");
  (PFNGLTEXCOORD3IPROC)func()
  continue;
}

if(strcmp("glTexCoord3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord3iv");
  (PFNGLTEXCOORD3IVPROC)func()
  continue;
}

if(strcmp("glTexCoord3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord3s");
  (PFNGLTEXCOORD3SPROC)func()
  continue;
}

if(strcmp("glTexCoord3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord3sv");
  (PFNGLTEXCOORD3SVPROC)func()
  continue;
}

if(strcmp("glTexCoord4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord4d");
  (PFNGLTEXCOORD4DPROC)func()
  continue;
}

if(strcmp("glTexCoord4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord4dv");
  (PFNGLTEXCOORD4DVPROC)func()
  continue;
}

if(strcmp("glTexCoord4f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord4f");
  (PFNGLTEXCOORD4FPROC)func()
  continue;
}

if(strcmp("glTexCoord4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord4fv");
  (PFNGLTEXCOORD4FVPROC)func()
  continue;
}

if(strcmp("glTexCoord4i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord4i");
  (PFNGLTEXCOORD4IPROC)func()
  continue;
}

if(strcmp("glTexCoord4iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord4iv");
  (PFNGLTEXCOORD4IVPROC)func()
  continue;
}

if(strcmp("glTexCoord4s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord4s");
  (PFNGLTEXCOORD4SPROC)func()
  continue;
}

if(strcmp("glTexCoord4sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoord4sv");
  (PFNGLTEXCOORD4SVPROC)func()
  continue;
}

if(strcmp("glVertex2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex2d");
  (PFNGLVERTEX2DPROC)func()
  continue;
}

if(strcmp("glVertex2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex2dv");
  (PFNGLVERTEX2DVPROC)func()
  continue;
}

if(strcmp("glVertex2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex2f");
  (PFNGLVERTEX2FPROC)func()
  continue;
}

if(strcmp("glVertex2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex2fv");
  (PFNGLVERTEX2FVPROC)func()
  continue;
}

if(strcmp("glVertex2i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex2i");
  (PFNGLVERTEX2IPROC)func()
  continue;
}

if(strcmp("glVertex2iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex2iv");
  (PFNGLVERTEX2IVPROC)func()
  continue;
}

if(strcmp("glVertex2s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex2s");
  (PFNGLVERTEX2SPROC)func()
  continue;
}

if(strcmp("glVertex2sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex2sv");
  (PFNGLVERTEX2SVPROC)func()
  continue;
}

if(strcmp("glVertex3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex3d");
  (PFNGLVERTEX3DPROC)func()
  continue;
}

if(strcmp("glVertex3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex3dv");
  (PFNGLVERTEX3DVPROC)func()
  continue;
}

if(strcmp("glVertex3f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex3f");
  (PFNGLVERTEX3FPROC)func()
  continue;
}

if(strcmp("glVertex3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex3fv");
  (PFNGLVERTEX3FVPROC)func()
  continue;
}

if(strcmp("glVertex3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex3i");
  (PFNGLVERTEX3IPROC)func()
  continue;
}

if(strcmp("glVertex3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex3iv");
  (PFNGLVERTEX3IVPROC)func()
  continue;
}

if(strcmp("glVertex3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex3s");
  (PFNGLVERTEX3SPROC)func()
  continue;
}

if(strcmp("glVertex3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex3sv");
  (PFNGLVERTEX3SVPROC)func()
  continue;
}

if(strcmp("glVertex4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex4d");
  (PFNGLVERTEX4DPROC)func()
  continue;
}

if(strcmp("glVertex4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex4dv");
  (PFNGLVERTEX4DVPROC)func()
  continue;
}

if(strcmp("glVertex4f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex4f");
  (PFNGLVERTEX4FPROC)func()
  continue;
}

if(strcmp("glVertex4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex4fv");
  (PFNGLVERTEX4FVPROC)func()
  continue;
}

if(strcmp("glVertex4i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex4i");
  (PFNGLVERTEX4IPROC)func()
  continue;
}

if(strcmp("glVertex4iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex4iv");
  (PFNGLVERTEX4IVPROC)func()
  continue;
}

if(strcmp("glVertex4s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex4s");
  (PFNGLVERTEX4SPROC)func()
  continue;
}

if(strcmp("glVertex4sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertex4sv");
  (PFNGLVERTEX4SVPROC)func()
  continue;
}

if(strcmp("glClipPlane",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClipPlane");
  (PFNGLCLIPPLANEPROC)func()
  continue;
}

if(strcmp("glColorMaterial",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorMaterial");
  (PFNGLCOLORMATERIALPROC)func()
  continue;
}

if(strcmp("glCullFace",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCullFace");
  (PFNGLCULLFACEPROC)func()
  continue;
}

if(strcmp("glFogf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogf");
  (PFNGLFOGFPROC)func()
  continue;
}

if(strcmp("glFogfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogfv");
  (PFNGLFOGFVPROC)func()
  continue;
}

if(strcmp("glFogi",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogi");
  (PFNGLFOGIPROC)func()
  continue;
}

if(strcmp("glFogiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogiv");
  (PFNGLFOGIVPROC)func()
  continue;
}

if(strcmp("glFrontFace",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFrontFace");
  (PFNGLFRONTFACEPROC)func()
  continue;
}

if(strcmp("glHint",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glHint");
  (PFNGLHINTPROC)func()
  continue;
}

if(strcmp("glLightf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightf");
  (PFNGLLIGHTFPROC)func()
  continue;
}

if(strcmp("glLightfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightfv");
  (PFNGLLIGHTFVPROC)func()
  continue;
}

if(strcmp("glLighti",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLighti");
  (PFNGLLIGHTIPROC)func()
  continue;
}

if(strcmp("glLightiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightiv");
  (PFNGLLIGHTIVPROC)func()
  continue;
}

if(strcmp("glLightModelf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightModelf");
  (PFNGLLIGHTMODELFPROC)func()
  continue;
}

if(strcmp("glLightModelfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightModelfv");
  (PFNGLLIGHTMODELFVPROC)func()
  continue;
}

if(strcmp("glLightModeli",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightModeli");
  (PFNGLLIGHTMODELIPROC)func()
  continue;
}

if(strcmp("glLightModeliv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightModeliv");
  (PFNGLLIGHTMODELIVPROC)func()
  continue;
}

if(strcmp("glLineStipple",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLineStipple");
  (PFNGLLINESTIPPLEPROC)func()
  continue;
}

if(strcmp("glLineWidth",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLineWidth");
  (PFNGLLINEWIDTHPROC)func()
  continue;
}

if(strcmp("glMaterialf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMaterialf");
  (PFNGLMATERIALFPROC)func()
  continue;
}

if(strcmp("glMaterialfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMaterialfv");
  (PFNGLMATERIALFVPROC)func()
  continue;
}

if(strcmp("glMateriali",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMateriali");
  (PFNGLMATERIALIPROC)func()
  continue;
}

if(strcmp("glMaterialiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMaterialiv");
  (PFNGLMATERIALIVPROC)func()
  continue;
}

if(strcmp("glPointSize",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointSize");
  (PFNGLPOINTSIZEPROC)func()
  continue;
}

if(strcmp("glPolygonMode",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPolygonMode");
  (PFNGLPOLYGONMODEPROC)func()
  continue;
}

if(strcmp("glPolygonStipple",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPolygonStipple");
  (PFNGLPOLYGONSTIPPLEPROC)func()
  continue;
}

if(strcmp("glScissor",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glScissor");
  (PFNGLSCISSORPROC)func()
  continue;
}

if(strcmp("glShadeModel",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glShadeModel");
  (PFNGLSHADEMODELPROC)func()
  continue;
}

if(strcmp("glTexParameterf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexParameterf");
  (PFNGLTEXPARAMETERFPROC)func()
  continue;
}

if(strcmp("glTexParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexParameterfv");
  (PFNGLTEXPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glTexParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexParameteri");
  (PFNGLTEXPARAMETERIPROC)func()
  continue;
}

if(strcmp("glTexParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexParameteriv");
  (PFNGLTEXPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glTexImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexImage1D");
  (PFNGLTEXIMAGE1DPROC)func()
  continue;
}

if(strcmp("glTexImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexImage2D");
  (PFNGLTEXIMAGE2DPROC)func()
  continue;
}

if(strcmp("glTexEnvf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexEnvf");
  (PFNGLTEXENVFPROC)func()
  continue;
}

if(strcmp("glTexEnvfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexEnvfv");
  (PFNGLTEXENVFVPROC)func()
  continue;
}

if(strcmp("glTexEnvi",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexEnvi");
  (PFNGLTEXENVIPROC)func()
  continue;
}

if(strcmp("glTexEnviv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexEnviv");
  (PFNGLTEXENVIVPROC)func()
  continue;
}

if(strcmp("glTexGend",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexGend");
  (PFNGLTEXGENDPROC)func()
  continue;
}

if(strcmp("glTexGendv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexGendv");
  (PFNGLTEXGENDVPROC)func()
  continue;
}

if(strcmp("glTexGenf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexGenf");
  (PFNGLTEXGENFPROC)func()
  continue;
}

if(strcmp("glTexGenfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexGenfv");
  (PFNGLTEXGENFVPROC)func()
  continue;
}

if(strcmp("glTexGeni",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexGeni");
  (PFNGLTEXGENIPROC)func()
  continue;
}

if(strcmp("glTexGeniv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexGeniv");
  (PFNGLTEXGENIVPROC)func()
  continue;
}

if(strcmp("glFeedbackBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFeedbackBuffer");
  (PFNGLFEEDBACKBUFFERPROC)func()
  continue;
}

if(strcmp("glSelectBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSelectBuffer");
  (PFNGLSELECTBUFFERPROC)func()
  continue;
}

if(strcmp("glRenderMode",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRenderMode");
  (PFNGLRENDERMODEPROC)func()
  continue;
}

if(strcmp("glInitNames",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInitNames");
  (PFNGLINITNAMESPROC)func()
  continue;
}

if(strcmp("glLoadName",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLoadName");
  (PFNGLLOADNAMEPROC)func()
  continue;
}

if(strcmp("glPassThrough",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPassThrough");
  (PFNGLPASSTHROUGHPROC)func()
  continue;
}

if(strcmp("glPopName",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPopName");
  (PFNGLPOPNAMEPROC)func()
  continue;
}

if(strcmp("glPushName",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPushName");
  (PFNGLPUSHNAMEPROC)func()
  continue;
}

if(strcmp("glDrawBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawBuffer");
  (PFNGLDRAWBUFFERPROC)func()
  continue;
}

if(strcmp("glClear",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClear");
  (PFNGLCLEARPROC)func()
  continue;
}

if(strcmp("glClearAccum",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearAccum");
  (PFNGLCLEARACCUMPROC)func()
  continue;
}

if(strcmp("glClearIndex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearIndex");
  (PFNGLCLEARINDEXPROC)func()
  continue;
}

if(strcmp("glClearColor",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearColor");
  (PFNGLCLEARCOLORPROC)func()
  continue;
}

if(strcmp("glClearStencil",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearStencil");
  (PFNGLCLEARSTENCILPROC)func()
  continue;
}

if(strcmp("glClearDepth",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearDepth");
  (PFNGLCLEARDEPTHPROC)func()
  continue;
}

if(strcmp("glStencilMask",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glStencilMask");
  (PFNGLSTENCILMASKPROC)func()
  continue;
}

if(strcmp("glColorMask",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorMask");
  (PFNGLCOLORMASKPROC)func()
  continue;
}

if(strcmp("glDepthMask",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthMask");
  (PFNGLDEPTHMASKPROC)func()
  continue;
}

if(strcmp("glIndexMask",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexMask");
  (PFNGLINDEXMASKPROC)func()
  continue;
}

if(strcmp("glAccum",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAccum");
  (PFNGLACCUMPROC)func()
  continue;
}

if(strcmp("glDisable",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDisable");
  (PFNGLDISABLEPROC)func()
  continue;
}

if(strcmp("glEnable",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEnable");
  (PFNGLENABLEPROC)func()
  continue;
}

if(strcmp("glFinish",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFinish");
  (PFNGLFINISHPROC)func()
  continue;
}

if(strcmp("glFlush",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFlush");
  (PFNGLFLUSHPROC)func()
  continue;
}

if(strcmp("glPopAttrib",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPopAttrib");
  (PFNGLPOPATTRIBPROC)func()
  continue;
}

if(strcmp("glPushAttrib",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPushAttrib");
  (PFNGLPUSHATTRIBPROC)func()
  continue;
}

if(strcmp("glMap1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMap1d");
  (PFNGLMAP1DPROC)func()
  continue;
}

if(strcmp("glMap1f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMap1f");
  (PFNGLMAP1FPROC)func()
  continue;
}

if(strcmp("glMap2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMap2d");
  (PFNGLMAP2DPROC)func()
  continue;
}

if(strcmp("glMap2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMap2f");
  (PFNGLMAP2FPROC)func()
  continue;
}

if(strcmp("glMapGrid1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMapGrid1d");
  (PFNGLMAPGRID1DPROC)func()
  continue;
}

if(strcmp("glMapGrid1f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMapGrid1f");
  (PFNGLMAPGRID1FPROC)func()
  continue;
}

if(strcmp("glMapGrid2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMapGrid2d");
  (PFNGLMAPGRID2DPROC)func()
  continue;
}

if(strcmp("glMapGrid2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMapGrid2f");
  (PFNGLMAPGRID2FPROC)func()
  continue;
}

if(strcmp("glEvalCoord1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalCoord1d");
  (PFNGLEVALCOORD1DPROC)func()
  continue;
}

if(strcmp("glEvalCoord1dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalCoord1dv");
  (PFNGLEVALCOORD1DVPROC)func()
  continue;
}

if(strcmp("glEvalCoord1f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalCoord1f");
  (PFNGLEVALCOORD1FPROC)func()
  continue;
}

if(strcmp("glEvalCoord1fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalCoord1fv");
  (PFNGLEVALCOORD1FVPROC)func()
  continue;
}

if(strcmp("glEvalCoord2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalCoord2d");
  (PFNGLEVALCOORD2DPROC)func()
  continue;
}

if(strcmp("glEvalCoord2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalCoord2dv");
  (PFNGLEVALCOORD2DVPROC)func()
  continue;
}

if(strcmp("glEvalCoord2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalCoord2f");
  (PFNGLEVALCOORD2FPROC)func()
  continue;
}

if(strcmp("glEvalCoord2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalCoord2fv");
  (PFNGLEVALCOORD2FVPROC)func()
  continue;
}

if(strcmp("glEvalMesh1",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalMesh1");
  (PFNGLEVALMESH1PROC)func()
  continue;
}

if(strcmp("glEvalPoint1",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalPoint1");
  (PFNGLEVALPOINT1PROC)func()
  continue;
}

if(strcmp("glEvalMesh2",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalMesh2");
  (PFNGLEVALMESH2PROC)func()
  continue;
}

if(strcmp("glEvalPoint2",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEvalPoint2");
  (PFNGLEVALPOINT2PROC)func()
  continue;
}

if(strcmp("glAlphaFunc",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAlphaFunc");
  (PFNGLALPHAFUNCPROC)func()
  continue;
}

if(strcmp("glBlendFunc",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendFunc");
  (PFNGLBLENDFUNCPROC)func()
  continue;
}

if(strcmp("glLogicOp",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLogicOp");
  (PFNGLLOGICOPPROC)func()
  continue;
}

if(strcmp("glStencilFunc",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glStencilFunc");
  (PFNGLSTENCILFUNCPROC)func()
  continue;
}

if(strcmp("glStencilOp",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glStencilOp");
  (PFNGLSTENCILOPPROC)func()
  continue;
}

if(strcmp("glDepthFunc",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthFunc");
  (PFNGLDEPTHFUNCPROC)func()
  continue;
}

if(strcmp("glPixelZoom",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPixelZoom");
  (PFNGLPIXELZOOMPROC)func()
  continue;
}

if(strcmp("glPixelTransferf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPixelTransferf");
  (PFNGLPIXELTRANSFERFPROC)func()
  continue;
}

if(strcmp("glPixelTransferi",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPixelTransferi");
  (PFNGLPIXELTRANSFERIPROC)func()
  continue;
}

if(strcmp("glPixelStoref",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPixelStoref");
  (PFNGLPIXELSTOREFPROC)func()
  continue;
}

if(strcmp("glPixelStorei",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPixelStorei");
  (PFNGLPIXELSTOREIPROC)func()
  continue;
}

if(strcmp("glPixelMapfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPixelMapfv");
  (PFNGLPIXELMAPFVPROC)func()
  continue;
}

if(strcmp("glPixelMapuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPixelMapuiv");
  (PFNGLPIXELMAPUIVPROC)func()
  continue;
}

if(strcmp("glPixelMapusv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPixelMapusv");
  (PFNGLPIXELMAPUSVPROC)func()
  continue;
}

if(strcmp("glReadBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glReadBuffer");
  (PFNGLREADBUFFERPROC)func()
  continue;
}

if(strcmp("glCopyPixels",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyPixels");
  (PFNGLCOPYPIXELSPROC)func()
  continue;
}

if(strcmp("glReadPixels",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glReadPixels");
  (PFNGLREADPIXELSPROC)func()
  continue;
}

if(strcmp("glDrawPixels",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawPixels");
  (PFNGLDRAWPIXELSPROC)func()
  continue;
}

if(strcmp("glGetBooleanv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetBooleanv");
  (PFNGLGETBOOLEANVPROC)func()
  continue;
}

if(strcmp("glGetClipPlane",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetClipPlane");
  (PFNGLGETCLIPPLANEPROC)func()
  continue;
}

if(strcmp("glGetDoublev",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetDoublev");
  (PFNGLGETDOUBLEVPROC)func()
  continue;
}

if(strcmp("glGetError",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetError");
  (PFNGLGETERRORPROC)func()
  continue;
}

if(strcmp("glGetFloatv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetFloatv");
  (PFNGLGETFLOATVPROC)func()
  continue;
}

if(strcmp("glGetIntegerv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetIntegerv");
  (PFNGLGETINTEGERVPROC)func()
  continue;
}

if(strcmp("glGetLightfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetLightfv");
  (PFNGLGETLIGHTFVPROC)func()
  continue;
}

if(strcmp("glGetLightiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetLightiv");
  (PFNGLGETLIGHTIVPROC)func()
  continue;
}

if(strcmp("glGetMapdv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMapdv");
  (PFNGLGETMAPDVPROC)func()
  continue;
}

if(strcmp("glGetMapfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMapfv");
  (PFNGLGETMAPFVPROC)func()
  continue;
}

if(strcmp("glGetMapiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMapiv");
  (PFNGLGETMAPIVPROC)func()
  continue;
}

if(strcmp("glGetMaterialfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMaterialfv");
  (PFNGLGETMATERIALFVPROC)func()
  continue;
}

if(strcmp("glGetMaterialiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMaterialiv");
  (PFNGLGETMATERIALIVPROC)func()
  continue;
}

if(strcmp("glGetPixelMapfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPixelMapfv");
  (PFNGLGETPIXELMAPFVPROC)func()
  continue;
}

if(strcmp("glGetPixelMapuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPixelMapuiv");
  (PFNGLGETPIXELMAPUIVPROC)func()
  continue;
}

if(strcmp("glGetPixelMapusv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPixelMapusv");
  (PFNGLGETPIXELMAPUSVPROC)func()
  continue;
}

if(strcmp("glGetPolygonStipple",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPolygonStipple");
  (PFNGLGETPOLYGONSTIPPLEPROC)func()
  continue;
}

if(strcmp("glGetString",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetString");
  (PFNGLGETSTRINGPROC)func()
  continue;
}

if(strcmp("glGetTexEnvfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexEnvfv");
  (PFNGLGETTEXENVFVPROC)func()
  continue;
}

if(strcmp("glGetTexEnviv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexEnviv");
  (PFNGLGETTEXENVIVPROC)func()
  continue;
}

if(strcmp("glGetTexGendv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexGendv");
  (PFNGLGETTEXGENDVPROC)func()
  continue;
}

if(strcmp("glGetTexGenfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexGenfv");
  (PFNGLGETTEXGENFVPROC)func()
  continue;
}

if(strcmp("glGetTexGeniv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexGeniv");
  (PFNGLGETTEXGENIVPROC)func()
  continue;
}

if(strcmp("glGetTexImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexImage");
  (PFNGLGETTEXIMAGEPROC)func()
  continue;
}

if(strcmp("glGetTexParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexParameterfv");
  (PFNGLGETTEXPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetTexParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexParameteriv");
  (PFNGLGETTEXPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetTexLevelParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexLevelParameterfv");
  (PFNGLGETTEXLEVELPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetTexLevelParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexLevelParameteriv");
  (PFNGLGETTEXLEVELPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glIsEnabled",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsEnabled");
  (PFNGLISENABLEDPROC)func()
  continue;
}

if(strcmp("glIsList",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsList");
  (PFNGLISLISTPROC)func()
  continue;
}

if(strcmp("glDepthRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthRange");
  (PFNGLDEPTHRANGEPROC)func()
  continue;
}

if(strcmp("glFrustum",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFrustum");
  (PFNGLFRUSTUMPROC)func()
  continue;
}

if(strcmp("glLoadIdentity",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLoadIdentity");
  (PFNGLLOADIDENTITYPROC)func()
  continue;
}

if(strcmp("glLoadMatrixf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLoadMatrixf");
  (PFNGLLOADMATRIXFPROC)func()
  continue;
}

if(strcmp("glLoadMatrixd",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLoadMatrixd");
  (PFNGLLOADMATRIXDPROC)func()
  continue;
}

if(strcmp("glMatrixMode",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMatrixMode");
  (PFNGLMATRIXMODEPROC)func()
  continue;
}

if(strcmp("glMultMatrixf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultMatrixf");
  (PFNGLMULTMATRIXFPROC)func()
  continue;
}

if(strcmp("glMultMatrixd",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultMatrixd");
  (PFNGLMULTMATRIXDPROC)func()
  continue;
}

if(strcmp("glOrtho",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glOrtho");
  (PFNGLORTHOPROC)func()
  continue;
}

if(strcmp("glPopMatrix",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPopMatrix");
  (PFNGLPOPMATRIXPROC)func()
  continue;
}

if(strcmp("glPushMatrix",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPushMatrix");
  (PFNGLPUSHMATRIXPROC)func()
  continue;
}

if(strcmp("glRotated",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRotated");
  (PFNGLROTATEDPROC)func()
  continue;
}

if(strcmp("glRotatef",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRotatef");
  (PFNGLROTATEFPROC)func()
  continue;
}

if(strcmp("glScaled",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glScaled");
  (PFNGLSCALEDPROC)func()
  continue;
}

if(strcmp("glScalef",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glScalef");
  (PFNGLSCALEFPROC)func()
  continue;
}

if(strcmp("glTranslated",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTranslated");
  (PFNGLTRANSLATEDPROC)func()
  continue;
}

if(strcmp("glTranslatef",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTranslatef");
  (PFNGLTRANSLATEFPROC)func()
  continue;
}

if(strcmp("glViewport",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glViewport");
  (PFNGLVIEWPORTPROC)func()
  continue;
}

if(strcmp("glArrayElement",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glArrayElement");
  (PFNGLARRAYELEMENTPROC)func()
  continue;
}

if(strcmp("glBindTexture",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindTexture");
  (PFNGLBINDTEXTUREPROC)func()
  continue;
}

if(strcmp("glColorPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorPointer");
  (PFNGLCOLORPOINTERPROC)func()
  continue;
}

if(strcmp("glDisableClientState",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDisableClientState");
  (PFNGLDISABLECLIENTSTATEPROC)func()
  continue;
}

if(strcmp("glDrawArrays",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawArrays");
  (PFNGLDRAWARRAYSPROC)func()
  continue;
}

if(strcmp("glDrawElements",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawElements");
  (PFNGLDRAWELEMENTSPROC)func()
  continue;
}

if(strcmp("glEdgeFlagPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEdgeFlagPointer");
  (PFNGLEDGEFLAGPOINTERPROC)func()
  continue;
}

if(strcmp("glEnableClientState",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEnableClientState");
  (PFNGLENABLECLIENTSTATEPROC)func()
  continue;
}

if(strcmp("glIndexPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexPointer");
  (PFNGLINDEXPOINTERPROC)func()
  continue;
}

if(strcmp("glIndexub",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexub");
  (PFNGLINDEXUBPROC)func()
  continue;
}

if(strcmp("glIndexubv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexubv");
  (PFNGLINDEXUBVPROC)func()
  continue;
}

if(strcmp("glInterleavedArrays",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInterleavedArrays");
  (PFNGLINTERLEAVEDARRAYSPROC)func()
  continue;
}

if(strcmp("glNormalPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormalPointer");
  (PFNGLNORMALPOINTERPROC)func()
  continue;
}

if(strcmp("glPolygonOffset",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPolygonOffset");
  (PFNGLPOLYGONOFFSETPROC)func()
  continue;
}

if(strcmp("glTexCoordPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordPointer");
  (PFNGLTEXCOORDPOINTERPROC)func()
  continue;
}

if(strcmp("glVertexPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexPointer");
  (PFNGLVERTEXPOINTERPROC)func()
  continue;
}

if(strcmp("glAreTexturesResident",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAreTexturesResident");
  (PFNGLARETEXTURESRESIDENTPROC)func()
  continue;
}

if(strcmp("glCopyTexImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyTexImage1D");
  (PFNGLCOPYTEXIMAGE1DPROC)func()
  continue;
}

if(strcmp("glCopyTexImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyTexImage2D");
  (PFNGLCOPYTEXIMAGE2DPROC)func()
  continue;
}

if(strcmp("glCopyTexSubImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyTexSubImage1D");
  (PFNGLCOPYTEXSUBIMAGE1DPROC)func()
  continue;
}

if(strcmp("glCopyTexSubImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyTexSubImage2D");
  (PFNGLCOPYTEXSUBIMAGE2DPROC)func()
  continue;
}

if(strcmp("glDeleteTextures",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteTextures");
  (PFNGLDELETETEXTURESPROC)func()
  continue;
}

if(strcmp("glGenTextures",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenTextures");
  (PFNGLGENTEXTURESPROC)func()
  continue;
}

if(strcmp("glGetPointerv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPointerv");
  (PFNGLGETPOINTERVPROC)func()
  continue;
}

if(strcmp("glIsTexture",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsTexture");
  (PFNGLISTEXTUREPROC)func()
  continue;
}

if(strcmp("glPrioritizeTextures",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPrioritizeTextures");
  (PFNGLPRIORITIZETEXTURESPROC)func()
  continue;
}

if(strcmp("glTexSubImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexSubImage1D");
  (PFNGLTEXSUBIMAGE1DPROC)func()
  continue;
}

if(strcmp("glTexSubImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexSubImage2D");
  (PFNGLTEXSUBIMAGE2DPROC)func()
  continue;
}

if(strcmp("glPopClientAttrib",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPopClientAttrib");
  (PFNGLPOPCLIENTATTRIBPROC)func()
  continue;
}

if(strcmp("glPushClientAttrib",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPushClientAttrib");
  (PFNGLPUSHCLIENTATTRIBPROC)func()
  continue;
}

if(strcmp("glBlendColor",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendColor");
  (PFNGLBLENDCOLORPROC)func()
  continue;
}

if(strcmp("glBlendEquation",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendEquation");
  (PFNGLBLENDEQUATIONPROC)func()
  continue;
}

if(strcmp("glDrawRangeElements",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawRangeElements");
  (PFNGLDRAWRANGEELEMENTSPROC)func()
  continue;
}

if(strcmp("glColorTable",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorTable");
  (PFNGLCOLORTABLEPROC)func()
  continue;
}

if(strcmp("glColorTableParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorTableParameterfv");
  (PFNGLCOLORTABLEPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glColorTableParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorTableParameteriv");
  (PFNGLCOLORTABLEPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glCopyColorTable",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyColorTable");
  (PFNGLCOPYCOLORTABLEPROC)func()
  continue;
}

if(strcmp("glGetColorTable",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetColorTable");
  (PFNGLGETCOLORTABLEPROC)func()
  continue;
}

if(strcmp("glGetColorTableParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetColorTableParameterfv");
  (PFNGLGETCOLORTABLEPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetColorTableParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetColorTableParameteriv");
  (PFNGLGETCOLORTABLEPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glColorSubTable",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorSubTable");
  (PFNGLCOLORSUBTABLEPROC)func()
  continue;
}

if(strcmp("glCopyColorSubTable",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyColorSubTable");
  (PFNGLCOPYCOLORSUBTABLEPROC)func()
  continue;
}

if(strcmp("glConvolutionFilter1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glConvolutionFilter1D");
  (PFNGLCONVOLUTIONFILTER1DPROC)func()
  continue;
}

if(strcmp("glConvolutionFilter2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glConvolutionFilter2D");
  (PFNGLCONVOLUTIONFILTER2DPROC)func()
  continue;
}

if(strcmp("glConvolutionParameterf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glConvolutionParameterf");
  (PFNGLCONVOLUTIONPARAMETERFPROC)func()
  continue;
}

if(strcmp("glConvolutionParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glConvolutionParameterfv");
  (PFNGLCONVOLUTIONPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glConvolutionParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glConvolutionParameteri");
  (PFNGLCONVOLUTIONPARAMETERIPROC)func()
  continue;
}

if(strcmp("glConvolutionParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glConvolutionParameteriv");
  (PFNGLCONVOLUTIONPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glCopyConvolutionFilter1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyConvolutionFilter1D");
  (PFNGLCOPYCONVOLUTIONFILTER1DPROC)func()
  continue;
}

if(strcmp("glCopyConvolutionFilter2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyConvolutionFilter2D");
  (PFNGLCOPYCONVOLUTIONFILTER2DPROC)func()
  continue;
}

if(strcmp("glGetConvolutionFilter",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetConvolutionFilter");
  (PFNGLGETCONVOLUTIONFILTERPROC)func()
  continue;
}

if(strcmp("glGetConvolutionParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetConvolutionParameterfv");
  (PFNGLGETCONVOLUTIONPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetConvolutionParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetConvolutionParameteriv");
  (PFNGLGETCONVOLUTIONPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetSeparableFilter",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetSeparableFilter");
  (PFNGLGETSEPARABLEFILTERPROC)func()
  continue;
}

if(strcmp("glSeparableFilter2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSeparableFilter2D");
  (PFNGLSEPARABLEFILTER2DPROC)func()
  continue;
}

if(strcmp("glGetHistogram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetHistogram");
  (PFNGLGETHISTOGRAMPROC)func()
  continue;
}

if(strcmp("glGetHistogramParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetHistogramParameterfv");
  (PFNGLGETHISTOGRAMPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetHistogramParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetHistogramParameteriv");
  (PFNGLGETHISTOGRAMPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetMinmax",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMinmax");
  (PFNGLGETMINMAXPROC)func()
  continue;
}

if(strcmp("glGetMinmaxParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMinmaxParameterfv");
  (PFNGLGETMINMAXPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetMinmaxParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMinmaxParameteriv");
  (PFNGLGETMINMAXPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glHistogram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glHistogram");
  (PFNGLHISTOGRAMPROC)func()
  continue;
}

if(strcmp("glMinmax",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMinmax");
  (PFNGLMINMAXPROC)func()
  continue;
}

if(strcmp("glResetHistogram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glResetHistogram");
  (PFNGLRESETHISTOGRAMPROC)func()
  continue;
}

if(strcmp("glResetMinmax",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glResetMinmax");
  (PFNGLRESETMINMAXPROC)func()
  continue;
}

if(strcmp("glTexImage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexImage3D");
  (PFNGLTEXIMAGE3DPROC)func()
  continue;
}

if(strcmp("glTexSubImage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexSubImage3D");
  (PFNGLTEXSUBIMAGE3DPROC)func()
  continue;
}

if(strcmp("glCopyTexSubImage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyTexSubImage3D");
  (PFNGLCOPYTEXSUBIMAGE3DPROC)func()
  continue;
}

if(strcmp("glActiveTexture",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glActiveTexture");
  (PFNGLACTIVETEXTUREPROC)func()
  continue;
}

if(strcmp("glClientActiveTexture",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClientActiveTexture");
  (PFNGLCLIENTACTIVETEXTUREPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord1d");
  (PFNGLMULTITEXCOORD1DPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord1dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord1dv");
  (PFNGLMULTITEXCOORD1DVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord1fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord1fARB");
  (PFNGLMULTITEXCOORD1FARBPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord1fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord1fvARB");
  (PFNGLMULTITEXCOORD1FVARBPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord1i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord1i");
  (PFNGLMULTITEXCOORD1IPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord1iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord1iv");
  (PFNGLMULTITEXCOORD1IVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord1s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord1s");
  (PFNGLMULTITEXCOORD1SPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord1sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord1sv");
  (PFNGLMULTITEXCOORD1SVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord2d");
  (PFNGLMULTITEXCOORD2DPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord2dv");
  (PFNGLMULTITEXCOORD2DVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord2fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord2fARB");
  (PFNGLMULTITEXCOORD2FARBPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord2fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord2fvARB");
  (PFNGLMULTITEXCOORD2FVARBPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord2i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord2i");
  (PFNGLMULTITEXCOORD2IPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord2iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord2iv");
  (PFNGLMULTITEXCOORD2IVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord2s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord2s");
  (PFNGLMULTITEXCOORD2SPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord2sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord2sv");
  (PFNGLMULTITEXCOORD2SVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord3d");
  (PFNGLMULTITEXCOORD3DPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord3dv");
  (PFNGLMULTITEXCOORD3DVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord3fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord3fARB");
  (PFNGLMULTITEXCOORD3FARBPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord3fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord3fvARB");
  (PFNGLMULTITEXCOORD3FVARBPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord3i");
  (PFNGLMULTITEXCOORD3IPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord3iv");
  (PFNGLMULTITEXCOORD3IVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord3s");
  (PFNGLMULTITEXCOORD3SPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord3sv");
  (PFNGLMULTITEXCOORD3SVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4d");
  (PFNGLMULTITEXCOORD4DPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4dv");
  (PFNGLMULTITEXCOORD4DVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4fARB");
  (PFNGLMULTITEXCOORD4FARBPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4fvARB");
  (PFNGLMULTITEXCOORD4FVARBPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4i");
  (PFNGLMULTITEXCOORD4IPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4iv");
  (PFNGLMULTITEXCOORD4IVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4s");
  (PFNGLMULTITEXCOORD4SPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4sv");
  (PFNGLMULTITEXCOORD4SVPROC)func()
  continue;
}

if(strcmp("glCompressedTexImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTexImage1D");
  (PFNGLCOMPRESSEDTEXIMAGE1DPROC)func()
  continue;
}

if(strcmp("glCompressedTexImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTexImage2D");
  (PFNGLCOMPRESSEDTEXIMAGE2DPROC)func()
  continue;
}

if(strcmp("glCompressedTexImage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTexImage3D");
  (PFNGLCOMPRESSEDTEXIMAGE3DPROC)func()
  continue;
}

if(strcmp("glCompressedTexSubImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTexSubImage1D");
  (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)func()
  continue;
}

if(strcmp("glCompressedTexSubImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTexSubImage2D");
  (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)func()
  continue;
}

if(strcmp("glCompressedTexSubImage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTexSubImage3D");
  (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)func()
  continue;
}

if(strcmp("glGetCompressedTexImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetCompressedTexImage");
  (PFNGLGETCOMPRESSEDTEXIMAGEPROC)func()
  continue;
}

if(strcmp("glLoadTransposeMatrixd",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLoadTransposeMatrixd");
  (PFNGLLOADTRANSPOSEMATRIXDPROC)func()
  continue;
}

if(strcmp("glLoadTransposeMatrixf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLoadTransposeMatrixf");
  (PFNGLLOADTRANSPOSEMATRIXFPROC)func()
  continue;
}

if(strcmp("glMultTransposeMatrixd",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultTransposeMatrixd");
  (PFNGLMULTTRANSPOSEMATRIXDPROC)func()
  continue;
}

if(strcmp("glMultTransposeMatrixf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultTransposeMatrixf");
  (PFNGLMULTTRANSPOSEMATRIXFPROC)func()
  continue;
}

if(strcmp("glSampleCoverage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSampleCoverage");
  (PFNGLSAMPLECOVERAGEPROC)func()
  continue;
}

if(strcmp("glBlendFuncSeparate",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendFuncSeparate");
  (PFNGLBLENDFUNCSEPARATEPROC)func()
  continue;
}

if(strcmp("glFogCoordPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogCoordPointer");
  (PFNGLFOGCOORDPOINTERPROC)func()
  continue;
}

if(strcmp("glFogCoordd",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogCoordd");
  (PFNGLFOGCOORDDPROC)func()
  continue;
}

if(strcmp("glFogCoorddv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogCoorddv");
  (PFNGLFOGCOORDDVPROC)func()
  continue;
}

if(strcmp("glMultiDrawArrays",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiDrawArrays");
  (PFNGLMULTIDRAWARRAYSPROC)func()
  continue;
}

if(strcmp("glPointParameterf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointParameterf");
  (PFNGLPOINTPARAMETERFPROC)func()
  continue;
}

if(strcmp("glPointParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointParameterfv");
  (PFNGLPOINTPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glPointParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointParameteri");
  (PFNGLPOINTPARAMETERIPROC)func()
  continue;
}

if(strcmp("glPointParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointParameteriv");
  (PFNGLPOINTPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3b",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3b");
  (PFNGLSECONDARYCOLOR3BPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3bv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3bv");
  (PFNGLSECONDARYCOLOR3BVPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3d");
  (PFNGLSECONDARYCOLOR3DPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3dv");
  (PFNGLSECONDARYCOLOR3DVPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3i");
  (PFNGLSECONDARYCOLOR3IPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3iv");
  (PFNGLSECONDARYCOLOR3IVPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3s");
  (PFNGLSECONDARYCOLOR3SPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3sv");
  (PFNGLSECONDARYCOLOR3SVPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3ub",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3ub");
  (PFNGLSECONDARYCOLOR3UBPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3ubv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3ubv");
  (PFNGLSECONDARYCOLOR3UBVPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3ui");
  (PFNGLSECONDARYCOLOR3UIPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3uiv");
  (PFNGLSECONDARYCOLOR3UIVPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3us",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3us");
  (PFNGLSECONDARYCOLOR3USPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3usv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3usv");
  (PFNGLSECONDARYCOLOR3USVPROC)func()
  continue;
}

if(strcmp("glSecondaryColorPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColorPointer");
  (PFNGLSECONDARYCOLORPOINTERPROC)func()
  continue;
}

if(strcmp("glWindowPos2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos2d");
  (PFNGLWINDOWPOS2DPROC)func()
  continue;
}

if(strcmp("glWindowPos2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos2dv");
  (PFNGLWINDOWPOS2DVPROC)func()
  continue;
}

if(strcmp("glWindowPos2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos2f");
  (PFNGLWINDOWPOS2FPROC)func()
  continue;
}

if(strcmp("glWindowPos2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos2fv");
  (PFNGLWINDOWPOS2FVPROC)func()
  continue;
}

if(strcmp("glWindowPos2i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos2i");
  (PFNGLWINDOWPOS2IPROC)func()
  continue;
}

if(strcmp("glWindowPos2iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos2iv");
  (PFNGLWINDOWPOS2IVPROC)func()
  continue;
}

if(strcmp("glWindowPos2s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos2s");
  (PFNGLWINDOWPOS2SPROC)func()
  continue;
}

if(strcmp("glWindowPos2sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos2sv");
  (PFNGLWINDOWPOS2SVPROC)func()
  continue;
}

if(strcmp("glWindowPos3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos3d");
  (PFNGLWINDOWPOS3DPROC)func()
  continue;
}

if(strcmp("glWindowPos3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos3dv");
  (PFNGLWINDOWPOS3DVPROC)func()
  continue;
}

if(strcmp("glWindowPos3f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos3f");
  (PFNGLWINDOWPOS3FPROC)func()
  continue;
}

if(strcmp("glWindowPos3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos3fv");
  (PFNGLWINDOWPOS3FVPROC)func()
  continue;
}

if(strcmp("glWindowPos3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos3i");
  (PFNGLWINDOWPOS3IPROC)func()
  continue;
}

if(strcmp("glWindowPos3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos3iv");
  (PFNGLWINDOWPOS3IVPROC)func()
  continue;
}

if(strcmp("glWindowPos3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos3s");
  (PFNGLWINDOWPOS3SPROC)func()
  continue;
}

if(strcmp("glWindowPos3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos3sv");
  (PFNGLWINDOWPOS3SVPROC)func()
  continue;
}

if(strcmp("glBeginQuery",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBeginQuery");
  (PFNGLBEGINQUERYPROC)func()
  continue;
}

if(strcmp("glBindBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindBuffer");
  (PFNGLBINDBUFFERPROC)func()
  continue;
}

if(strcmp("glBufferData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBufferData");
  (PFNGLBUFFERDATAPROC)func()
  continue;
}

if(strcmp("glBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBufferSubData");
  (PFNGLBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glDeleteBuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteBuffers");
  (PFNGLDELETEBUFFERSPROC)func()
  continue;
}

if(strcmp("glDeleteQueries",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteQueries");
  (PFNGLDELETEQUERIESPROC)func()
  continue;
}

if(strcmp("glEndQuery",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEndQuery");
  (PFNGLENDQUERYPROC)func()
  continue;
}

if(strcmp("glGenBuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenBuffers");
  (PFNGLGENBUFFERSPROC)func()
  continue;
}

if(strcmp("glGenQueries",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenQueries");
  (PFNGLGENQUERIESPROC)func()
  continue;
}

if(strcmp("glGetBufferParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetBufferParameteriv");
  (PFNGLGETBUFFERPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetBufferPointerv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetBufferPointerv");
  (PFNGLGETBUFFERPOINTERVPROC)func()
  continue;
}

if(strcmp("glGetBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetBufferSubData");
  (PFNGLGETBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glGetQueryObjectiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryObjectiv");
  (PFNGLGETQUERYOBJECTIVPROC)func()
  continue;
}

if(strcmp("glGetQueryObjectuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryObjectuiv");
  (PFNGLGETQUERYOBJECTUIVPROC)func()
  continue;
}

if(strcmp("glGetQueryiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryiv");
  (PFNGLGETQUERYIVPROC)func()
  continue;
}

if(strcmp("glIsBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsBuffer");
  (PFNGLISBUFFERPROC)func()
  continue;
}

if(strcmp("glIsQuery",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsQuery");
  (PFNGLISQUERYPROC)func()
  continue;
}

if(strcmp("glMapBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMapBuffer");
  (PFNGLMAPBUFFERPROC)func()
  continue;
}

if(strcmp("glUnmapBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUnmapBuffer");
  (PFNGLUNMAPBUFFERPROC)func()
  continue;
}

if(strcmp("glAttachShader",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAttachShader");
  (PFNGLATTACHSHADERPROC)func()
  continue;
}

if(strcmp("glBindAttribLocation",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindAttribLocation");
  (PFNGLBINDATTRIBLOCATIONPROC)func()
  continue;
}

if(strcmp("glBlendEquationSeparate",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendEquationSeparate");
  (PFNGLBLENDEQUATIONSEPARATEPROC)func()
  continue;
}

if(strcmp("glCompileShader",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompileShader");
  (PFNGLCOMPILESHADERPROC)func()
  continue;
}

if(strcmp("glCreateProgram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateProgram");
  (PFNGLCREATEPROGRAMPROC)func()
  continue;
}

if(strcmp("glCreateShader",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateShader");
  (PFNGLCREATESHADERPROC)func()
  continue;
}

if(strcmp("glDeleteProgram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteProgram");
  (PFNGLDELETEPROGRAMPROC)func()
  continue;
}

if(strcmp("glDeleteShader",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteShader");
  (PFNGLDELETESHADERPROC)func()
  continue;
}

if(strcmp("glDetachShader",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDetachShader");
  (PFNGLDETACHSHADERPROC)func()
  continue;
}

if(strcmp("glDisableVertexAttribArray",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDisableVertexAttribArray");
  (PFNGLDISABLEVERTEXATTRIBARRAYPROC)func()
  continue;
}

if(strcmp("glDrawBuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawBuffers");
  (PFNGLDRAWBUFFERSPROC)func()
  continue;
}

if(strcmp("glEnableVertexAttribArray",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEnableVertexAttribArray");
  (PFNGLENABLEVERTEXATTRIBARRAYPROC)func()
  continue;
}

if(strcmp("glGetActiveAttrib",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveAttrib");
  (PFNGLGETACTIVEATTRIBPROC)func()
  continue;
}

if(strcmp("glGetActiveUniform",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveUniform");
  (PFNGLGETACTIVEUNIFORMPROC)func()
  continue;
}

if(strcmp("glGetAttachedShaders",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetAttachedShaders");
  (PFNGLGETATTACHEDSHADERSPROC)func()
  continue;
}

if(strcmp("glGetAttribLocation",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetAttribLocation");
  (PFNGLGETATTRIBLOCATIONPROC)func()
  continue;
}

if(strcmp("glGetProgramInfoLog",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramInfoLog");
  (PFNGLGETPROGRAMINFOLOGPROC)func()
  continue;
}

if(strcmp("glGetProgramiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramiv");
  (PFNGLGETPROGRAMIVPROC)func()
  continue;
}

if(strcmp("glGetShaderInfoLog",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetShaderInfoLog");
  (PFNGLGETSHADERINFOLOGPROC)func()
  continue;
}

if(strcmp("glGetShaderSource",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetShaderSource");
  (PFNGLGETSHADERSOURCEPROC)func()
  continue;
}

if(strcmp("glGetShaderiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetShaderiv");
  (PFNGLGETSHADERIVPROC)func()
  continue;
}

if(strcmp("glGetUniformLocation",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetUniformLocation");
  (PFNGLGETUNIFORMLOCATIONPROC)func()
  continue;
}

if(strcmp("glGetUniformfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetUniformfv");
  (PFNGLGETUNIFORMFVPROC)func()
  continue;
}

if(strcmp("glGetUniformiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetUniformiv");
  (PFNGLGETUNIFORMIVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribPointerv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribPointerv");
  (PFNGLGETVERTEXATTRIBPOINTERVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribdv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribdv");
  (PFNGLGETVERTEXATTRIBDVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribfv");
  (PFNGLGETVERTEXATTRIBFVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribiv");
  (PFNGLGETVERTEXATTRIBIVPROC)func()
  continue;
}

if(strcmp("glIsProgram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsProgram");
  (PFNGLISPROGRAMPROC)func()
  continue;
}

if(strcmp("glIsShader",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsShader");
  (PFNGLISSHADERPROC)func()
  continue;
}

if(strcmp("glLinkProgram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLinkProgram");
  (PFNGLLINKPROGRAMPROC)func()
  continue;
}

if(strcmp("glShaderSource",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glShaderSource");
  (PFNGLSHADERSOURCEPROC)func()
  continue;
}

if(strcmp("glStencilFuncSeparate",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glStencilFuncSeparate");
  (PFNGLSTENCILFUNCSEPARATEPROC)func()
  continue;
}

if(strcmp("glStencilMaskSeparate",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glStencilMaskSeparate");
  (PFNGLSTENCILMASKSEPARATEPROC)func()
  continue;
}

if(strcmp("glStencilOpSeparate",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glStencilOpSeparate");
  (PFNGLSTENCILOPSEPARATEPROC)func()
  continue;
}

if(strcmp("glUniform1f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform1f");
  (PFNGLUNIFORM1FPROC)func()
  continue;
}

if(strcmp("glUniform1fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform1fv");
  (PFNGLUNIFORM1FVPROC)func()
  continue;
}

if(strcmp("glUniform1i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform1i");
  (PFNGLUNIFORM1IPROC)func()
  continue;
}

if(strcmp("glUniform1iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform1iv");
  (PFNGLUNIFORM1IVPROC)func()
  continue;
}

if(strcmp("glUniform2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform2f");
  (PFNGLUNIFORM2FPROC)func()
  continue;
}

if(strcmp("glUniform2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform2fv");
  (PFNGLUNIFORM2FVPROC)func()
  continue;
}

if(strcmp("glUniform2i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform2i");
  (PFNGLUNIFORM2IPROC)func()
  continue;
}

if(strcmp("glUniform2iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform2iv");
  (PFNGLUNIFORM2IVPROC)func()
  continue;
}

if(strcmp("glUniform3f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform3f");
  (PFNGLUNIFORM3FPROC)func()
  continue;
}

if(strcmp("glUniform3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform3fv");
  (PFNGLUNIFORM3FVPROC)func()
  continue;
}

if(strcmp("glUniform3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform3i");
  (PFNGLUNIFORM3IPROC)func()
  continue;
}

if(strcmp("glUniform3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform3iv");
  (PFNGLUNIFORM3IVPROC)func()
  continue;
}

if(strcmp("glUniform4f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform4f");
  (PFNGLUNIFORM4FPROC)func()
  continue;
}

if(strcmp("glUniform4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform4fv");
  (PFNGLUNIFORM4FVPROC)func()
  continue;
}

if(strcmp("glUniform4i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform4i");
  (PFNGLUNIFORM4IPROC)func()
  continue;
}

if(strcmp("glUniform4iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform4iv");
  (PFNGLUNIFORM4IVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix2fv");
  (PFNGLUNIFORMMATRIX2FVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix3fv");
  (PFNGLUNIFORMMATRIX3FVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix4fv");
  (PFNGLUNIFORMMATRIX4FVPROC)func()
  continue;
}

if(strcmp("glUseProgram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUseProgram");
  (PFNGLUSEPROGRAMPROC)func()
  continue;
}

if(strcmp("glValidateProgram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glValidateProgram");
  (PFNGLVALIDATEPROGRAMPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1d");
  (PFNGLVERTEXATTRIB1DPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1dv");
  (PFNGLVERTEXATTRIB1DVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1s");
  (PFNGLVERTEXATTRIB1SPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1sv");
  (PFNGLVERTEXATTRIB1SVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2d");
  (PFNGLVERTEXATTRIB2DPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2dv");
  (PFNGLVERTEXATTRIB2DVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2s");
  (PFNGLVERTEXATTRIB2SPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2sv");
  (PFNGLVERTEXATTRIB2SVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3d");
  (PFNGLVERTEXATTRIB3DPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3dv");
  (PFNGLVERTEXATTRIB3DVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3s");
  (PFNGLVERTEXATTRIB3SPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3sv");
  (PFNGLVERTEXATTRIB3SVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4Nbv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4Nbv");
  (PFNGLVERTEXATTRIB4NBVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4Niv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4Niv");
  (PFNGLVERTEXATTRIB4NIVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4Nsv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4Nsv");
  (PFNGLVERTEXATTRIB4NSVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4Nub",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4Nub");
  (PFNGLVERTEXATTRIB4NUBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4Nubv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4Nubv");
  (PFNGLVERTEXATTRIB4NUBVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4Nuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4Nuiv");
  (PFNGLVERTEXATTRIB4NUIVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4Nusv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4Nusv");
  (PFNGLVERTEXATTRIB4NUSVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4bv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4bv");
  (PFNGLVERTEXATTRIB4BVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4d");
  (PFNGLVERTEXATTRIB4DPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4dv");
  (PFNGLVERTEXATTRIB4DVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4iv");
  (PFNGLVERTEXATTRIB4IVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4s",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4s");
  (PFNGLVERTEXATTRIB4SPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4sv");
  (PFNGLVERTEXATTRIB4SVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4ubv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4ubv");
  (PFNGLVERTEXATTRIB4UBVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4uiv");
  (PFNGLVERTEXATTRIB4UIVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4usv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4usv");
  (PFNGLVERTEXATTRIB4USVPROC)func()
  continue;
}

if(strcmp("glVertexAttribPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribPointer");
  (PFNGLVERTEXATTRIBPOINTERPROC)func()
  continue;
}

if(strcmp("glUniformMatrix2x3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix2x3fv");
  (PFNGLUNIFORMMATRIX2X3FVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix2x4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix2x4fv");
  (PFNGLUNIFORMMATRIX2X4FVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix3x2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix3x2fv");
  (PFNGLUNIFORMMATRIX3X2FVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix3x4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix3x4fv");
  (PFNGLUNIFORMMATRIX3X4FVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix4x2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix4x2fv");
  (PFNGLUNIFORMMATRIX4X2FVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix4x3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix4x3fv");
  (PFNGLUNIFORMMATRIX4X3FVPROC)func()
  continue;
}

if(strcmp("glBeginConditionalRender",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBeginConditionalRender");
  (PFNGLBEGINCONDITIONALRENDERPROC)func()
  continue;
}

if(strcmp("glBeginTransformFeedback",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBeginTransformFeedback");
  (PFNGLBEGINTRANSFORMFEEDBACKPROC)func()
  continue;
}

if(strcmp("glBindBufferBase",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindBufferBase");
  (PFNGLBINDBUFFERBASEPROC)func()
  continue;
}

if(strcmp("glBindBufferRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindBufferRange");
  (PFNGLBINDBUFFERRANGEPROC)func()
  continue;
}

if(strcmp("glBindFragDataLocation",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindFragDataLocation");
  (PFNGLBINDFRAGDATALOCATIONPROC)func()
  continue;
}

if(strcmp("glClampColor",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClampColor");
  (PFNGLCLAMPCOLORPROC)func()
  continue;
}

if(strcmp("glClearBufferfi",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearBufferfi");
  (PFNGLCLEARBUFFERFIPROC)func()
  continue;
}

if(strcmp("glClearBufferfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearBufferfv");
  (PFNGLCLEARBUFFERFVPROC)func()
  continue;
}

if(strcmp("glClearBufferiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearBufferiv");
  (PFNGLCLEARBUFFERIVPROC)func()
  continue;
}

if(strcmp("glClearBufferuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearBufferuiv");
  (PFNGLCLEARBUFFERUIVPROC)func()
  continue;
}

if(strcmp("glColorMaski",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorMaski");
  (PFNGLCOLORMASKIPROC)func()
  continue;
}

if(strcmp("glDisablei",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDisablei");
  (PFNGLDISABLEIPROC)func()
  continue;
}

if(strcmp("glEnablei",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEnablei");
  (PFNGLENABLEIPROC)func()
  continue;
}

if(strcmp("glEndConditionalRender",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEndConditionalRender");
  (PFNGLENDCONDITIONALRENDERPROC)func()
  continue;
}

if(strcmp("glEndTransformFeedback",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEndTransformFeedback");
  (PFNGLENDTRANSFORMFEEDBACKPROC)func()
  continue;
}

if(strcmp("glGetBooleani_v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetBooleani_v");
  (PFNGLGETBOOLEANI_VPROC)func()
  continue;
}

if(strcmp("glGetFragDataLocation",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetFragDataLocation");
  (PFNGLGETFRAGDATALOCATIONPROC)func()
  continue;
}

if(strcmp("glGetIntegeri_v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetIntegeri_v");
  (PFNGLGETINTEGERI_VPROC)func()
  continue;
}

if(strcmp("glGetStringi",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetStringi");
  (PFNGLGETSTRINGIPROC)func()
  continue;
}

if(strcmp("glGetTexParameterIiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexParameterIiv");
  (PFNGLGETTEXPARAMETERIIVPROC)func()
  continue;
}

if(strcmp("glGetTexParameterIuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexParameterIuiv");
  (PFNGLGETTEXPARAMETERIUIVPROC)func()
  continue;
}

if(strcmp("glGetTransformFeedbackVarying",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTransformFeedbackVarying");
  (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)func()
  continue;
}

if(strcmp("glGetUniformuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetUniformuiv");
  (PFNGLGETUNIFORMUIVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribIiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribIiv");
  (PFNGLGETVERTEXATTRIBIIVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribIuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribIuiv");
  (PFNGLGETVERTEXATTRIBIUIVPROC)func()
  continue;
}

if(strcmp("glIsEnabledi",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsEnabledi");
  (PFNGLISENABLEDIPROC)func()
  continue;
}

if(strcmp("glTexParameterIiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexParameterIiv");
  (PFNGLTEXPARAMETERIIVPROC)func()
  continue;
}

if(strcmp("glTexParameterIuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexParameterIuiv");
  (PFNGLTEXPARAMETERIUIVPROC)func()
  continue;
}

if(strcmp("glTransformFeedbackVaryings",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTransformFeedbackVaryings");
  (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)func()
  continue;
}

if(strcmp("glUniform1ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform1ui");
  (PFNGLUNIFORM1UIPROC)func()
  continue;
}

if(strcmp("glUniform1uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform1uiv");
  (PFNGLUNIFORM1UIVPROC)func()
  continue;
}

if(strcmp("glUniform2ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform2ui");
  (PFNGLUNIFORM2UIPROC)func()
  continue;
}

if(strcmp("glUniform2uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform2uiv");
  (PFNGLUNIFORM2UIVPROC)func()
  continue;
}

if(strcmp("glUniform3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform3ui");
  (PFNGLUNIFORM3UIPROC)func()
  continue;
}

if(strcmp("glUniform3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform3uiv");
  (PFNGLUNIFORM3UIVPROC)func()
  continue;
}

if(strcmp("glUniform4ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform4ui");
  (PFNGLUNIFORM4UIPROC)func()
  continue;
}

if(strcmp("glUniform4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform4uiv");
  (PFNGLUNIFORM4UIVPROC)func()
  continue;
}

if(strcmp("glVertexAttribI1iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI1iv");
  (PFNGLVERTEXATTRIBI1IVPROC)func()
  continue;
}

if(strcmp("glVertexAttribI1uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI1uiv");
  (PFNGLVERTEXATTRIBI1UIVPROC)func()
  continue;
}

if(strcmp("glVertexAttribI4bv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI4bv");
  (PFNGLVERTEXATTRIBI4BVPROC)func()
  continue;
}

if(strcmp("glVertexAttribI4sv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI4sv");
  (PFNGLVERTEXATTRIBI4SVPROC)func()
  continue;
}

if(strcmp("glVertexAttribI4ubv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI4ubv");
  (PFNGLVERTEXATTRIBI4UBVPROC)func()
  continue;
}

if(strcmp("glVertexAttribI4usv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI4usv");
  (PFNGLVERTEXATTRIBI4USVPROC)func()
  continue;
}

if(strcmp("glVertexAttribIPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribIPointer");
  (PFNGLVERTEXATTRIBIPOINTERPROC)func()
  continue;
}

if(strcmp("glPrimitiveRestartIndex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPrimitiveRestartIndex");
  (PFNGLPRIMITIVERESTARTINDEXPROC)func()
  continue;
}

if(strcmp("glTexBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexBuffer");
  (PFNGLTEXBUFFERPROC)func()
  continue;
}

if(strcmp("glFramebufferTexture",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFramebufferTexture");
  (PFNGLFRAMEBUFFERTEXTUREPROC)func()
  continue;
}

if(strcmp("glGetBufferParameteri64v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetBufferParameteri64v");
  (PFNGLGETBUFFERPARAMETERI64VPROC)func()
  continue;
}

if(strcmp("glGetInteger64i_v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetInteger64i_v");
  (PFNGLGETINTEGER64I_VPROC)func()
  continue;
}

if(strcmp("glVertexAttribDivisor",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribDivisor");
  (PFNGLVERTEXATTRIBDIVISORPROC)func()
  continue;
}

if(strcmp("glMinSampleShading",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMinSampleShading");
  (PFNGLMINSAMPLESHADINGPROC)func()
  continue;
}

if(strcmp("glMemoryBarrierByRegion",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMemoryBarrierByRegion");
  (PFNGLMEMORYBARRIERBYREGIONPROC)func()
  continue;
}

if(strcmp("glBindProgramARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindProgramARB");
  (PFNGLBINDPROGRAMARBPROC)func()
  continue;
}

if(strcmp("glDeleteProgramsARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteProgramsARB");
  (PFNGLDELETEPROGRAMSARBPROC)func()
  continue;
}

if(strcmp("glGenProgramsARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenProgramsARB");
  (PFNGLGENPROGRAMSARBPROC)func()
  continue;
}

if(strcmp("glGetProgramEnvParameterdvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramEnvParameterdvARB");
  (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)func()
  continue;
}

if(strcmp("glGetProgramEnvParameterfvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramEnvParameterfvARB");
  (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)func()
  continue;
}

if(strcmp("glGetProgramLocalParameterdvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramLocalParameterdvARB");
  (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)func()
  continue;
}

if(strcmp("glGetProgramLocalParameterfvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramLocalParameterfvARB");
  (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)func()
  continue;
}

if(strcmp("glGetProgramStringARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramStringARB");
  (PFNGLGETPROGRAMSTRINGARBPROC)func()
  continue;
}

if(strcmp("glGetProgramivARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramivARB");
  (PFNGLGETPROGRAMIVARBPROC)func()
  continue;
}

if(strcmp("glIsProgramARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsProgramARB");
  (PFNGLISPROGRAMARBPROC)func()
  continue;
}

if(strcmp("glProgramEnvParameter4dARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramEnvParameter4dARB");
  (PFNGLPROGRAMENVPARAMETER4DARBPROC)func()
  continue;
}

if(strcmp("glProgramEnvParameter4dvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramEnvParameter4dvARB");
  (PFNGLPROGRAMENVPARAMETER4DVARBPROC)func()
  continue;
}

if(strcmp("glProgramEnvParameter4fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramEnvParameter4fARB");
  (PFNGLPROGRAMENVPARAMETER4FARBPROC)func()
  continue;
}

if(strcmp("glProgramEnvParameter4fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramEnvParameter4fvARB");
  (PFNGLPROGRAMENVPARAMETER4FVARBPROC)func()
  continue;
}

if(strcmp("glProgramLocalParameter4dARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramLocalParameter4dARB");
  (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)func()
  continue;
}

if(strcmp("glProgramLocalParameter4dvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramLocalParameter4dvARB");
  (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)func()
  continue;
}

if(strcmp("glProgramLocalParameter4fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramLocalParameter4fARB");
  (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)func()
  continue;
}

if(strcmp("glProgramLocalParameter4fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramLocalParameter4fvARB");
  (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)func()
  continue;
}

if(strcmp("glProgramStringARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramStringARB");
  (PFNGLPROGRAMSTRINGARBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1fARB");
  (PFNGLVERTEXATTRIB1FARBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1fvARB");
  (PFNGLVERTEXATTRIB1FVARBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2fARB");
  (PFNGLVERTEXATTRIB2FARBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2fvARB");
  (PFNGLVERTEXATTRIB2FVARBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3fARB");
  (PFNGLVERTEXATTRIB3FARBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3fvARB");
  (PFNGLVERTEXATTRIB3FVARBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4fARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4fARB");
  (PFNGLVERTEXATTRIB4FARBPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4fvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4fvARB");
  (PFNGLVERTEXATTRIB4FVARBPROC)func()
  continue;
}

if(strcmp("glAttachObjectARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAttachObjectARB");
  (PFNGLATTACHOBJECTARBPROC)func()
  continue;
}

if(strcmp("glCreateProgramObjectARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateProgramObjectARB");
  (PFNGLCREATEPROGRAMOBJECTARBPROC)func()
  continue;
}

if(strcmp("glCreateShaderObjectARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateShaderObjectARB");
  (PFNGLCREATESHADEROBJECTARBPROC)func()
  continue;
}

if(strcmp("glDeleteObjectARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteObjectARB");
  (PFNGLDELETEOBJECTARBPROC)func()
  continue;
}

if(strcmp("glDetachObjectARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDetachObjectARB");
  (PFNGLDETACHOBJECTARBPROC)func()
  continue;
}

if(strcmp("glGetAttachedObjectsARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetAttachedObjectsARB");
  (PFNGLGETATTACHEDOBJECTSARBPROC)func()
  continue;
}

if(strcmp("glGetHandleARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetHandleARB");
  (PFNGLGETHANDLEARBPROC)func()
  continue;
}

if(strcmp("glGetInfoLogARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetInfoLogARB");
  (PFNGLGETINFOLOGARBPROC)func()
  continue;
}

if(strcmp("glGetObjectParameterfvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetObjectParameterfvARB");
  (PFNGLGETOBJECTPARAMETERFVARBPROC)func()
  continue;
}

if(strcmp("glGetObjectParameterivARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetObjectParameterivARB");
  (PFNGLGETOBJECTPARAMETERIVARBPROC)func()
  continue;
}

if(strcmp("glDrawArraysInstancedARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawArraysInstancedARB");
  (PFNGLDRAWARRAYSINSTANCEDARBPROC)func()
  continue;
}

if(strcmp("glDrawElementsInstancedARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawElementsInstancedARB");
  (PFNGLDRAWELEMENTSINSTANCEDARBPROC)func()
  continue;
}

if(strcmp("glBindFramebuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindFramebuffer");
  (PFNGLBINDFRAMEBUFFERPROC)func()
  continue;
}

if(strcmp("glBindRenderbuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindRenderbuffer");
  (PFNGLBINDRENDERBUFFERPROC)func()
  continue;
}

if(strcmp("glBlitFramebuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlitFramebuffer");
  (PFNGLBLITFRAMEBUFFERPROC)func()
  continue;
}

if(strcmp("glCheckFramebufferStatus",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCheckFramebufferStatus");
  (PFNGLCHECKFRAMEBUFFERSTATUSPROC)func()
  continue;
}

if(strcmp("glDeleteFramebuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteFramebuffers");
  (PFNGLDELETEFRAMEBUFFERSPROC)func()
  continue;
}

if(strcmp("glDeleteRenderbuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteRenderbuffers");
  (PFNGLDELETERENDERBUFFERSPROC)func()
  continue;
}

if(strcmp("glFramebufferRenderbuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFramebufferRenderbuffer");
  (PFNGLFRAMEBUFFERRENDERBUFFERPROC)func()
  continue;
}

if(strcmp("glFramebufferTexture1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFramebufferTexture1D");
  (PFNGLFRAMEBUFFERTEXTURE1DPROC)func()
  continue;
}

if(strcmp("glFramebufferTexture2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFramebufferTexture2D");
  (PFNGLFRAMEBUFFERTEXTURE2DPROC)func()
  continue;
}

if(strcmp("glFramebufferTexture3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFramebufferTexture3D");
  (PFNGLFRAMEBUFFERTEXTURE3DPROC)func()
  continue;
}

if(strcmp("glFramebufferTextureLayer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFramebufferTextureLayer");
  (PFNGLFRAMEBUFFERTEXTURELAYERPROC)func()
  continue;
}

if(strcmp("glGenFramebuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenFramebuffers");
  (PFNGLGENFRAMEBUFFERSPROC)func()
  continue;
}

if(strcmp("glGenRenderbuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenRenderbuffers");
  (PFNGLGENRENDERBUFFERSPROC)func()
  continue;
}

if(strcmp("glGenerateMipmap",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenerateMipmap");
  (PFNGLGENERATEMIPMAPPROC)func()
  continue;
}

if(strcmp("glGetFramebufferAttachmentParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetFramebufferAttachmentParameteriv");
  (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetRenderbufferParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetRenderbufferParameteriv");
  (PFNGLGETRENDERBUFFERPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glIsFramebuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsFramebuffer");
  (PFNGLISFRAMEBUFFERPROC)func()
  continue;
}

if(strcmp("glIsRenderbuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsRenderbuffer");
  (PFNGLISRENDERBUFFERPROC)func()
  continue;
}

if(strcmp("glRenderbufferStorage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRenderbufferStorage");
  (PFNGLRENDERBUFFERSTORAGEPROC)func()
  continue;
}

if(strcmp("glRenderbufferStorageMultisample",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRenderbufferStorageMultisample");
  (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)func()
  continue;
}

if(strcmp("glFlushMappedBufferRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFlushMappedBufferRange");
  (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)func()
  continue;
}

if(strcmp("glMapBufferRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMapBufferRange");
  (PFNGLMAPBUFFERRANGEPROC)func()
  continue;
}

if(strcmp("glBindVertexArray",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindVertexArray");
  (PFNGLBINDVERTEXARRAYPROC)func()
  continue;
}

if(strcmp("glDeleteVertexArrays",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteVertexArrays");
  (PFNGLDELETEVERTEXARRAYSPROC)func()
  continue;
}

if(strcmp("glGenVertexArrays",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenVertexArrays");
  (PFNGLGENVERTEXARRAYSPROC)func()
  continue;
}

if(strcmp("glIsVertexArray",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsVertexArray");
  (PFNGLISVERTEXARRAYPROC)func()
  continue;
}

if(strcmp("glGetActiveUniformBlockName",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveUniformBlockName");
  (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)func()
  continue;
}

if(strcmp("glGetActiveUniformBlockiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveUniformBlockiv");
  (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)func()
  continue;
}

if(strcmp("glGetActiveUniformName",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveUniformName");
  (PFNGLGETACTIVEUNIFORMNAMEPROC)func()
  continue;
}

if(strcmp("glGetActiveUniformsiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveUniformsiv");
  (PFNGLGETACTIVEUNIFORMSIVPROC)func()
  continue;
}

if(strcmp("glGetUniformBlockIndex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetUniformBlockIndex");
  (PFNGLGETUNIFORMBLOCKINDEXPROC)func()
  continue;
}

if(strcmp("glGetUniformIndices",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetUniformIndices");
  (PFNGLGETUNIFORMINDICESPROC)func()
  continue;
}

if(strcmp("glUniformBlockBinding",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformBlockBinding");
  (PFNGLUNIFORMBLOCKBINDINGPROC)func()
  continue;
}

if(strcmp("glCopyBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyBufferSubData");
  (PFNGLCOPYBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glClientWaitSync",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClientWaitSync");
  (PFNGLCLIENTWAITSYNCPROC)func()
  continue;
}

if(strcmp("glDeleteSync",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteSync");
  (PFNGLDELETESYNCPROC)func()
  continue;
}

if(strcmp("glFenceSync",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFenceSync");
  (PFNGLFENCESYNCPROC)func()
  continue;
}

if(strcmp("glGetInteger64v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetInteger64v");
  (PFNGLGETINTEGER64VPROC)func()
  continue;
}

if(strcmp("glGetSynciv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetSynciv");
  (PFNGLGETSYNCIVPROC)func()
  continue;
}

if(strcmp("glIsSync",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsSync");
  (PFNGLISSYNCPROC)func()
  continue;
}

if(strcmp("glWaitSync",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWaitSync");
  (PFNGLWAITSYNCPROC)func()
  continue;
}

if(strcmp("glDrawElementsBaseVertex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawElementsBaseVertex");
  (PFNGLDRAWELEMENTSBASEVERTEXPROC)func()
  continue;
}

if(strcmp("glDrawElementsInstancedBaseVertex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawElementsInstancedBaseVertex");
  (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)func()
  continue;
}

if(strcmp("glDrawRangeElementsBaseVertex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawRangeElementsBaseVertex");
  (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)func()
  continue;
}

if(strcmp("glMultiDrawElementsBaseVertex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiDrawElementsBaseVertex");
  (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)func()
  continue;
}

if(strcmp("glProvokingVertex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProvokingVertex");
  (PFNGLPROVOKINGVERTEXPROC)func()
  continue;
}

if(strcmp("glGetMultisamplefv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMultisamplefv");
  (PFNGLGETMULTISAMPLEFVPROC)func()
  continue;
}

if(strcmp("glSampleMaski",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSampleMaski");
  (PFNGLSAMPLEMASKIPROC)func()
  continue;
}

if(strcmp("glTexImage2DMultisample",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexImage2DMultisample");
  (PFNGLTEXIMAGE2DMULTISAMPLEPROC)func()
  continue;
}

if(strcmp("glTexImage3DMultisample",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexImage3DMultisample");
  (PFNGLTEXIMAGE3DMULTISAMPLEPROC)func()
  continue;
}

if(strcmp("glBlendEquationSeparateiARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendEquationSeparateiARB");
  (PFNGLBLENDEQUATIONSEPARATEIARBPROC)func()
  continue;
}

if(strcmp("glBlendEquationiARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendEquationiARB");
  (PFNGLBLENDEQUATIONIARBPROC)func()
  continue;
}

if(strcmp("glBlendFuncSeparateiARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendFuncSeparateiARB");
  (PFNGLBLENDFUNCSEPARATEIARBPROC)func()
  continue;
}

if(strcmp("glBlendFunciARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendFunciARB");
  (PFNGLBLENDFUNCIARBPROC)func()
  continue;
}

if(strcmp("glBindFragDataLocationIndexed",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindFragDataLocationIndexed");
  (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)func()
  continue;
}

if(strcmp("glGetFragDataIndex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetFragDataIndex");
  (PFNGLGETFRAGDATAINDEXPROC)func()
  continue;
}

if(strcmp("glBindSampler",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindSampler");
  (PFNGLBINDSAMPLERPROC)func()
  continue;
}

if(strcmp("glDeleteSamplers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteSamplers");
  (PFNGLDELETESAMPLERSPROC)func()
  continue;
}

if(strcmp("glGenSamplers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenSamplers");
  (PFNGLGENSAMPLERSPROC)func()
  continue;
}

if(strcmp("glGetSamplerParameterIiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetSamplerParameterIiv");
  (PFNGLGETSAMPLERPARAMETERIIVPROC)func()
  continue;
}

if(strcmp("glGetSamplerParameterIuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetSamplerParameterIuiv");
  (PFNGLGETSAMPLERPARAMETERIUIVPROC)func()
  continue;
}

if(strcmp("glGetSamplerParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetSamplerParameterfv");
  (PFNGLGETSAMPLERPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetSamplerParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetSamplerParameteriv");
  (PFNGLGETSAMPLERPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glIsSampler",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsSampler");
  (PFNGLISSAMPLERPROC)func()
  continue;
}

if(strcmp("glSamplerParameterIiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSamplerParameterIiv");
  (PFNGLSAMPLERPARAMETERIIVPROC)func()
  continue;
}

if(strcmp("glSamplerParameterIuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSamplerParameterIuiv");
  (PFNGLSAMPLERPARAMETERIUIVPROC)func()
  continue;
}

if(strcmp("glSamplerParameterf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSamplerParameterf");
  (PFNGLSAMPLERPARAMETERFPROC)func()
  continue;
}

if(strcmp("glSamplerParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSamplerParameterfv");
  (PFNGLSAMPLERPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glSamplerParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSamplerParameteri");
  (PFNGLSAMPLERPARAMETERIPROC)func()
  continue;
}

if(strcmp("glSamplerParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSamplerParameteriv");
  (PFNGLSAMPLERPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetQueryObjecti64v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryObjecti64v");
  (PFNGLGETQUERYOBJECTI64VPROC)func()
  continue;
}

if(strcmp("glGetQueryObjectui64v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryObjectui64v");
  (PFNGLGETQUERYOBJECTUI64VPROC)func()
  continue;
}

if(strcmp("glQueryCounter",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glQueryCounter");
  (PFNGLQUERYCOUNTERPROC)func()
  continue;
}

if(strcmp("glColorP3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorP3ui");
  (PFNGLCOLORP3UIPROC)func()
  continue;
}

if(strcmp("glColorP3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorP3uiv");
  (PFNGLCOLORP3UIVPROC)func()
  continue;
}

if(strcmp("glColorP4ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorP4ui");
  (PFNGLCOLORP4UIPROC)func()
  continue;
}

if(strcmp("glColorP4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorP4uiv");
  (PFNGLCOLORP4UIVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoordP1ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoordP1ui");
  (PFNGLMULTITEXCOORDP1UIPROC)func()
  continue;
}

if(strcmp("glMultiTexCoordP1uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoordP1uiv");
  (PFNGLMULTITEXCOORDP1UIVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoordP2ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoordP2ui");
  (PFNGLMULTITEXCOORDP2UIPROC)func()
  continue;
}

if(strcmp("glMultiTexCoordP2uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoordP2uiv");
  (PFNGLMULTITEXCOORDP2UIVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoordP3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoordP3ui");
  (PFNGLMULTITEXCOORDP3UIPROC)func()
  continue;
}

if(strcmp("glMultiTexCoordP3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoordP3uiv");
  (PFNGLMULTITEXCOORDP3UIVPROC)func()
  continue;
}

if(strcmp("glMultiTexCoordP4ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoordP4ui");
  (PFNGLMULTITEXCOORDP4UIPROC)func()
  continue;
}

if(strcmp("glMultiTexCoordP4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoordP4uiv");
  (PFNGLMULTITEXCOORDP4UIVPROC)func()
  continue;
}

if(strcmp("glNormalP3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormalP3ui");
  (PFNGLNORMALP3UIPROC)func()
  continue;
}

if(strcmp("glNormalP3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormalP3uiv");
  (PFNGLNORMALP3UIVPROC)func()
  continue;
}

if(strcmp("glSecondaryColorP3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColorP3ui");
  (PFNGLSECONDARYCOLORP3UIPROC)func()
  continue;
}

if(strcmp("glSecondaryColorP3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColorP3uiv");
  (PFNGLSECONDARYCOLORP3UIVPROC)func()
  continue;
}

if(strcmp("glTexCoordP1ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordP1ui");
  (PFNGLTEXCOORDP1UIPROC)func()
  continue;
}

if(strcmp("glTexCoordP1uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordP1uiv");
  (PFNGLTEXCOORDP1UIVPROC)func()
  continue;
}

if(strcmp("glTexCoordP2ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordP2ui");
  (PFNGLTEXCOORDP2UIPROC)func()
  continue;
}

if(strcmp("glTexCoordP2uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordP2uiv");
  (PFNGLTEXCOORDP2UIVPROC)func()
  continue;
}

if(strcmp("glTexCoordP3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordP3ui");
  (PFNGLTEXCOORDP3UIPROC)func()
  continue;
}

if(strcmp("glTexCoordP3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordP3uiv");
  (PFNGLTEXCOORDP3UIVPROC)func()
  continue;
}

if(strcmp("glTexCoordP4ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordP4ui");
  (PFNGLTEXCOORDP4UIPROC)func()
  continue;
}

if(strcmp("glTexCoordP4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordP4uiv");
  (PFNGLTEXCOORDP4UIVPROC)func()
  continue;
}

if(strcmp("glVertexAttribP1ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribP1ui");
  (PFNGLVERTEXATTRIBP1UIPROC)func()
  continue;
}

if(strcmp("glVertexAttribP1uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribP1uiv");
  (PFNGLVERTEXATTRIBP1UIVPROC)func()
  continue;
}

if(strcmp("glVertexAttribP2ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribP2ui");
  (PFNGLVERTEXATTRIBP2UIPROC)func()
  continue;
}

if(strcmp("glVertexAttribP2uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribP2uiv");
  (PFNGLVERTEXATTRIBP2UIVPROC)func()
  continue;
}

if(strcmp("glVertexAttribP3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribP3ui");
  (PFNGLVERTEXATTRIBP3UIPROC)func()
  continue;
}

if(strcmp("glVertexAttribP3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribP3uiv");
  (PFNGLVERTEXATTRIBP3UIVPROC)func()
  continue;
}

if(strcmp("glVertexAttribP4ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribP4ui");
  (PFNGLVERTEXATTRIBP4UIPROC)func()
  continue;
}

if(strcmp("glVertexAttribP4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribP4uiv");
  (PFNGLVERTEXATTRIBP4UIVPROC)func()
  continue;
}

if(strcmp("glVertexP2ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexP2ui");
  (PFNGLVERTEXP2UIPROC)func()
  continue;
}

if(strcmp("glVertexP2uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexP2uiv");
  (PFNGLVERTEXP2UIVPROC)func()
  continue;
}

if(strcmp("glVertexP3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexP3ui");
  (PFNGLVERTEXP3UIPROC)func()
  continue;
}

if(strcmp("glVertexP3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexP3uiv");
  (PFNGLVERTEXP3UIVPROC)func()
  continue;
}

if(strcmp("glVertexP4ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexP4ui");
  (PFNGLVERTEXP4UIPROC)func()
  continue;
}

if(strcmp("glVertexP4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexP4uiv");
  (PFNGLVERTEXP4UIVPROC)func()
  continue;
}

if(strcmp("glDrawArraysIndirect",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawArraysIndirect");
  (PFNGLDRAWARRAYSINDIRECTPROC)func()
  continue;
}

if(strcmp("glDrawElementsIndirect",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawElementsIndirect");
  (PFNGLDRAWELEMENTSINDIRECTPROC)func()
  continue;
}

if(strcmp("glGetUniformdv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetUniformdv");
  (PFNGLGETUNIFORMDVPROC)func()
  continue;
}

if(strcmp("glUniform1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform1d");
  (PFNGLUNIFORM1DPROC)func()
  continue;
}

if(strcmp("glUniform1dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform1dv");
  (PFNGLUNIFORM1DVPROC)func()
  continue;
}

if(strcmp("glUniform2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform2d");
  (PFNGLUNIFORM2DPROC)func()
  continue;
}

if(strcmp("glUniform2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform2dv");
  (PFNGLUNIFORM2DVPROC)func()
  continue;
}

if(strcmp("glUniform3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform3d");
  (PFNGLUNIFORM3DPROC)func()
  continue;
}

if(strcmp("glUniform3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform3dv");
  (PFNGLUNIFORM3DVPROC)func()
  continue;
}

if(strcmp("glUniform4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform4d");
  (PFNGLUNIFORM4DPROC)func()
  continue;
}

if(strcmp("glUniform4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniform4dv");
  (PFNGLUNIFORM4DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix2dv");
  (PFNGLUNIFORMMATRIX2DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix2x3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix2x3dv");
  (PFNGLUNIFORMMATRIX2X3DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix2x4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix2x4dv");
  (PFNGLUNIFORMMATRIX2X4DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix3dv");
  (PFNGLUNIFORMMATRIX3DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix3x2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix3x2dv");
  (PFNGLUNIFORMMATRIX3X2DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix3x4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix3x4dv");
  (PFNGLUNIFORMMATRIX3X4DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix4dv");
  (PFNGLUNIFORMMATRIX4DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix4x2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix4x2dv");
  (PFNGLUNIFORMMATRIX4X2DVPROC)func()
  continue;
}

if(strcmp("glUniformMatrix4x3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformMatrix4x3dv");
  (PFNGLUNIFORMMATRIX4X3DVPROC)func()
  continue;
}

if(strcmp("glGetActiveSubroutineName",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveSubroutineName");
  (PFNGLGETACTIVESUBROUTINENAMEPROC)func()
  continue;
}

if(strcmp("glGetActiveSubroutineUniformName",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveSubroutineUniformName");
  (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)func()
  continue;
}

if(strcmp("glGetActiveSubroutineUniformiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveSubroutineUniformiv");
  (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)func()
  continue;
}

if(strcmp("glGetProgramStageiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramStageiv");
  (PFNGLGETPROGRAMSTAGEIVPROC)func()
  continue;
}

if(strcmp("glGetSubroutineIndex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetSubroutineIndex");
  (PFNGLGETSUBROUTINEINDEXPROC)func()
  continue;
}

if(strcmp("glGetSubroutineUniformLocation",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetSubroutineUniformLocation");
  (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)func()
  continue;
}

if(strcmp("glGetUniformSubroutineuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetUniformSubroutineuiv");
  (PFNGLGETUNIFORMSUBROUTINEUIVPROC)func()
  continue;
}

if(strcmp("glUniformSubroutinesuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUniformSubroutinesuiv");
  (PFNGLUNIFORMSUBROUTINESUIVPROC)func()
  continue;
}

if(strcmp("glPatchParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPatchParameterfv");
  (PFNGLPATCHPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glPatchParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPatchParameteri");
  (PFNGLPATCHPARAMETERIPROC)func()
  continue;
}

if(strcmp("glBindTransformFeedback",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindTransformFeedback");
  (PFNGLBINDTRANSFORMFEEDBACKPROC)func()
  continue;
}

if(strcmp("glDeleteTransformFeedbacks",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteTransformFeedbacks");
  (PFNGLDELETETRANSFORMFEEDBACKSPROC)func()
  continue;
}

if(strcmp("glDrawTransformFeedback",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTransformFeedback");
  (PFNGLDRAWTRANSFORMFEEDBACKPROC)func()
  continue;
}

if(strcmp("glGenTransformFeedbacks",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenTransformFeedbacks");
  (PFNGLGENTRANSFORMFEEDBACKSPROC)func()
  continue;
}

if(strcmp("glIsTransformFeedback",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsTransformFeedback");
  (PFNGLISTRANSFORMFEEDBACKPROC)func()
  continue;
}

if(strcmp("glPauseTransformFeedback",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPauseTransformFeedback");
  (PFNGLPAUSETRANSFORMFEEDBACKPROC)func()
  continue;
}

if(strcmp("glResumeTransformFeedback",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glResumeTransformFeedback");
  (PFNGLRESUMETRANSFORMFEEDBACKPROC)func()
  continue;
}

if(strcmp("glBeginQueryIndexed",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBeginQueryIndexed");
  (PFNGLBEGINQUERYINDEXEDPROC)func()
  continue;
}

if(strcmp("glDrawTransformFeedbackStream",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTransformFeedbackStream");
  (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)func()
  continue;
}

if(strcmp("glEndQueryIndexed",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEndQueryIndexed");
  (PFNGLENDQUERYINDEXEDPROC)func()
  continue;
}

if(strcmp("glGetQueryIndexediv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryIndexediv");
  (PFNGLGETQUERYINDEXEDIVPROC)func()
  continue;
}

if(strcmp("glClearDepthf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearDepthf");
  (PFNGLCLEARDEPTHFPROC)func()
  continue;
}

if(strcmp("glDepthRangef",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthRangef");
  (PFNGLDEPTHRANGEFPROC)func()
  continue;
}

if(strcmp("glGetShaderPrecisionFormat",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetShaderPrecisionFormat");
  (PFNGLGETSHADERPRECISIONFORMATPROC)func()
  continue;
}

if(strcmp("glReleaseShaderCompiler",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glReleaseShaderCompiler");
  (PFNGLRELEASESHADERCOMPILERPROC)func()
  continue;
}

if(strcmp("glShaderBinary",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glShaderBinary");
  (PFNGLSHADERBINARYPROC)func()
  continue;
}

if(strcmp("glGetProgramBinary",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramBinary");
  (PFNGLGETPROGRAMBINARYPROC)func()
  continue;
}

if(strcmp("glProgramBinary",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramBinary");
  (PFNGLPROGRAMBINARYPROC)func()
  continue;
}

if(strcmp("glProgramParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramParameteri");
  (PFNGLPROGRAMPARAMETERIPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribLdv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribLdv");
  (PFNGLGETVERTEXATTRIBLDVPROC)func()
  continue;
}

if(strcmp("glVertexAttribL1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribL1d");
  (PFNGLVERTEXATTRIBL1DPROC)func()
  continue;
}

if(strcmp("glVertexAttribL1dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribL1dv");
  (PFNGLVERTEXATTRIBL1DVPROC)func()
  continue;
}

if(strcmp("glVertexAttribL2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribL2d");
  (PFNGLVERTEXATTRIBL2DPROC)func()
  continue;
}

if(strcmp("glVertexAttribL2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribL2dv");
  (PFNGLVERTEXATTRIBL2DVPROC)func()
  continue;
}

if(strcmp("glVertexAttribL3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribL3d");
  (PFNGLVERTEXATTRIBL3DPROC)func()
  continue;
}

if(strcmp("glVertexAttribL3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribL3dv");
  (PFNGLVERTEXATTRIBL3DVPROC)func()
  continue;
}

if(strcmp("glVertexAttribL4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribL4d");
  (PFNGLVERTEXATTRIBL4DPROC)func()
  continue;
}

if(strcmp("glVertexAttribL4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribL4dv");
  (PFNGLVERTEXATTRIBL4DVPROC)func()
  continue;
}

if(strcmp("glVertexAttribLPointer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribLPointer");
  (PFNGLVERTEXATTRIBLPOINTERPROC)func()
  continue;
}

if(strcmp("glDepthRangeArrayv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthRangeArrayv");
  (PFNGLDEPTHRANGEARRAYVPROC)func()
  continue;
}

if(strcmp("glDepthRangeIndexed",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthRangeIndexed");
  (PFNGLDEPTHRANGEINDEXEDPROC)func()
  continue;
}

if(strcmp("glGetDoublei_v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetDoublei_v");
  (PFNGLGETDOUBLEI_VPROC)func()
  continue;
}

if(strcmp("glGetFloati_v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetFloati_v");
  (PFNGLGETFLOATI_VPROC)func()
  continue;
}

if(strcmp("glScissorArrayv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glScissorArrayv");
  (PFNGLSCISSORARRAYVPROC)func()
  continue;
}

if(strcmp("glScissorIndexed",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glScissorIndexed");
  (PFNGLSCISSORINDEXEDPROC)func()
  continue;
}

if(strcmp("glScissorIndexedv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glScissorIndexedv");
  (PFNGLSCISSORINDEXEDVPROC)func()
  continue;
}

if(strcmp("glViewportArrayv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glViewportArrayv");
  (PFNGLVIEWPORTARRAYVPROC)func()
  continue;
}

if(strcmp("glViewportIndexedf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glViewportIndexedf");
  (PFNGLVIEWPORTINDEXEDFPROC)func()
  continue;
}

if(strcmp("glViewportIndexedfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glViewportIndexedfv");
  (PFNGLVIEWPORTINDEXEDFVPROC)func()
  continue;
}

if(strcmp("glGetGraphicsResetStatusARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetGraphicsResetStatusARB");
  (PFNGLGETGRAPHICSRESETSTATUSARBPROC)func()
  continue;
}

if(strcmp("glGetnColorTableARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnColorTableARB");
  (PFNGLGETNCOLORTABLEARBPROC)func()
  continue;
}

if(strcmp("glGetnCompressedTexImageARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnCompressedTexImageARB");
  (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)func()
  continue;
}

if(strcmp("glGetnConvolutionFilterARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnConvolutionFilterARB");
  (PFNGLGETNCONVOLUTIONFILTERARBPROC)func()
  continue;
}

if(strcmp("glGetnHistogramARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnHistogramARB");
  (PFNGLGETNHISTOGRAMARBPROC)func()
  continue;
}

if(strcmp("glGetnMapdvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnMapdvARB");
  (PFNGLGETNMAPDVARBPROC)func()
  continue;
}

if(strcmp("glGetnMapfvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnMapfvARB");
  (PFNGLGETNMAPFVARBPROC)func()
  continue;
}

if(strcmp("glGetnMapivARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnMapivARB");
  (PFNGLGETNMAPIVARBPROC)func()
  continue;
}

if(strcmp("glGetnMinmaxARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnMinmaxARB");
  (PFNGLGETNMINMAXARBPROC)func()
  continue;
}

if(strcmp("glGetnPixelMapfvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnPixelMapfvARB");
  (PFNGLGETNPIXELMAPFVARBPROC)func()
  continue;
}

if(strcmp("glGetnPixelMapuivARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnPixelMapuivARB");
  (PFNGLGETNPIXELMAPUIVARBPROC)func()
  continue;
}

if(strcmp("glGetnPixelMapusvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnPixelMapusvARB");
  (PFNGLGETNPIXELMAPUSVARBPROC)func()
  continue;
}

if(strcmp("glGetnPolygonStippleARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnPolygonStippleARB");
  (PFNGLGETNPOLYGONSTIPPLEARBPROC)func()
  continue;
}

if(strcmp("glGetnSeparableFilterARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnSeparableFilterARB");
  (PFNGLGETNSEPARABLEFILTERARBPROC)func()
  continue;
}

if(strcmp("glGetnTexImageARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnTexImageARB");
  (PFNGLGETNTEXIMAGEARBPROC)func()
  continue;
}

if(strcmp("glGetnUniformdvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnUniformdvARB");
  (PFNGLGETNUNIFORMDVARBPROC)func()
  continue;
}

if(strcmp("glGetnUniformfvARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnUniformfvARB");
  (PFNGLGETNUNIFORMFVARBPROC)func()
  continue;
}

if(strcmp("glGetnUniformivARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnUniformivARB");
  (PFNGLGETNUNIFORMIVARBPROC)func()
  continue;
}

if(strcmp("glGetnUniformuivARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetnUniformuivARB");
  (PFNGLGETNUNIFORMUIVARBPROC)func()
  continue;
}

if(strcmp("glReadnPixelsARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glReadnPixelsARB");
  (PFNGLREADNPIXELSARBPROC)func()
  continue;
}

if(strcmp("glDrawArraysInstancedBaseInstance",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawArraysInstancedBaseInstance");
  (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)func()
  continue;
}

if(strcmp("glDrawElementsInstancedBaseInstance",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawElementsInstancedBaseInstance");
  (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)func()
  continue;
}

if(strcmp("glDrawElementsInstancedBaseVertexBaseInstance",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawElementsInstancedBaseVertexBaseInstance");
  (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)func()
  continue;
}

if(strcmp("glDrawTransformFeedbackInstanced",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTransformFeedbackInstanced");
  (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)func()
  continue;
}

if(strcmp("glDrawTransformFeedbackStreamInstanced",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTransformFeedbackStreamInstanced");
  (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)func()
  continue;
}

if(strcmp("glGetInternalformativ",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetInternalformativ");
  (PFNGLGETINTERNALFORMATIVPROC)func()
  continue;
}

if(strcmp("glGetActiveAtomicCounterBufferiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetActiveAtomicCounterBufferiv");
  (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)func()
  continue;
}

if(strcmp("glBindImageTexture",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindImageTexture");
  (PFNGLBINDIMAGETEXTUREPROC)func()
  continue;
}

if(strcmp("glMemoryBarrier",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMemoryBarrier");
  (PFNGLMEMORYBARRIERPROC)func()
  continue;
}

if(strcmp("glTexStorage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexStorage1D");
  (PFNGLTEXSTORAGE1DPROC)func()
  continue;
}

if(strcmp("glTexStorage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexStorage2D");
  (PFNGLTEXSTORAGE2DPROC)func()
  continue;
}

if(strcmp("glTexStorage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexStorage3D");
  (PFNGLTEXSTORAGE3DPROC)func()
  continue;
}

if(strcmp("glTextureStorage1DEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureStorage1DEXT");
  (PFNGLTEXTURESTORAGE1DEXTPROC)func()
  continue;
}

if(strcmp("glTextureStorage2DEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureStorage2DEXT");
  (PFNGLTEXTURESTORAGE2DEXTPROC)func()
  continue;
}

if(strcmp("glTextureStorage3DEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureStorage3DEXT");
  (PFNGLTEXTURESTORAGE3DEXTPROC)func()
  continue;
}

if(strcmp("glClearBufferData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearBufferData");
  (PFNGLCLEARBUFFERDATAPROC)func()
  continue;
}

if(strcmp("glClearBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearBufferSubData");
  (PFNGLCLEARBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glDispatchCompute",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDispatchCompute");
  (PFNGLDISPATCHCOMPUTEPROC)func()
  continue;
}

if(strcmp("glDispatchComputeIndirect",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDispatchComputeIndirect");
  (PFNGLDISPATCHCOMPUTEINDIRECTPROC)func()
  continue;
}

if(strcmp("glCopyImageSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyImageSubData");
  (PFNGLCOPYIMAGESUBDATAPROC)func()
  continue;
}

if(strcmp("glTextureView",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureView");
  (PFNGLTEXTUREVIEWPROC)func()
  continue;
}

if(strcmp("glBindVertexBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindVertexBuffer");
  (PFNGLBINDVERTEXBUFFERPROC)func()
  continue;
}

if(strcmp("glVertexAttribBinding",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribBinding");
  (PFNGLVERTEXATTRIBBINDINGPROC)func()
  continue;
}

if(strcmp("glVertexAttribFormat",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribFormat");
  (PFNGLVERTEXATTRIBFORMATPROC)func()
  continue;
}

if(strcmp("glVertexAttribIFormat",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribIFormat");
  (PFNGLVERTEXATTRIBIFORMATPROC)func()
  continue;
}

if(strcmp("glVertexAttribLFormat",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribLFormat");
  (PFNGLVERTEXATTRIBLFORMATPROC)func()
  continue;
}

if(strcmp("glVertexBindingDivisor",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexBindingDivisor");
  (PFNGLVERTEXBINDINGDIVISORPROC)func()
  continue;
}

if(strcmp("glFramebufferParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFramebufferParameteri");
  (PFNGLFRAMEBUFFERPARAMETERIPROC)func()
  continue;
}

if(strcmp("glGetFramebufferParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetFramebufferParameteriv");
  (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetInternalformati64v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetInternalformati64v");
  (PFNGLGETINTERNALFORMATI64VPROC)func()
  continue;
}

if(strcmp("glMultiDrawArraysIndirect",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiDrawArraysIndirect");
  (PFNGLMULTIDRAWARRAYSINDIRECTPROC)func()
  continue;
}

if(strcmp("glMultiDrawElementsIndirect",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiDrawElementsIndirect");
  (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)func()
  continue;
}

if(strcmp("glGetProgramInterfaceiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramInterfaceiv");
  (PFNGLGETPROGRAMINTERFACEIVPROC)func()
  continue;
}

if(strcmp("glGetProgramResourceIndex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramResourceIndex");
  (PFNGLGETPROGRAMRESOURCEINDEXPROC)func()
  continue;
}

if(strcmp("glGetProgramResourceLocation",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramResourceLocation");
  (PFNGLGETPROGRAMRESOURCELOCATIONPROC)func()
  continue;
}

if(strcmp("glGetProgramResourceLocationIndex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramResourceLocationIndex");
  (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)func()
  continue;
}

if(strcmp("glGetProgramResourceName",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramResourceName");
  (PFNGLGETPROGRAMRESOURCENAMEPROC)func()
  continue;
}

if(strcmp("glGetProgramResourceiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramResourceiv");
  (PFNGLGETPROGRAMRESOURCEIVPROC)func()
  continue;
}

if(strcmp("glShaderStorageBlockBinding",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glShaderStorageBlockBinding");
  (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)func()
  continue;
}

if(strcmp("glTexBufferRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexBufferRange");
  (PFNGLTEXBUFFERRANGEPROC)func()
  continue;
}

if(strcmp("glTexStorage2DMultisample",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexStorage2DMultisample");
  (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)func()
  continue;
}

if(strcmp("glTexStorage3DMultisample",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexStorage3DMultisample");
  (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)func()
  continue;
}

if(strcmp("glBufferStorage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBufferStorage");
  (PFNGLBUFFERSTORAGEPROC)func()
  continue;
}

if(strcmp("glClearTexImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearTexImage");
  (PFNGLCLEARTEXIMAGEPROC)func()
  continue;
}

if(strcmp("glClearTexSubImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearTexSubImage");
  (PFNGLCLEARTEXSUBIMAGEPROC)func()
  continue;
}

if(strcmp("glBindBuffersBase",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindBuffersBase");
  (PFNGLBINDBUFFERSBASEPROC)func()
  continue;
}

if(strcmp("glBindBuffersRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindBuffersRange");
  (PFNGLBINDBUFFERSRANGEPROC)func()
  continue;
}

if(strcmp("glBindImageTextures",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindImageTextures");
  (PFNGLBINDIMAGETEXTURESPROC)func()
  continue;
}

if(strcmp("glBindSamplers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindSamplers");
  (PFNGLBINDSAMPLERSPROC)func()
  continue;
}

if(strcmp("glBindTextures",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindTextures");
  (PFNGLBINDTEXTURESPROC)func()
  continue;
}

if(strcmp("glBindVertexBuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindVertexBuffers");
  (PFNGLBINDVERTEXBUFFERSPROC)func()
  continue;
}

if(strcmp("glDispatchComputeGroupSizeARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDispatchComputeGroupSizeARB");
  (PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC)func()
  continue;
}

if(strcmp("glMultiDrawArraysIndirectCountARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiDrawArraysIndirectCountARB");
  (PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC)func()
  continue;
}

if(strcmp("glMultiDrawElementsIndirectCountARB",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiDrawElementsIndirectCountARB");
  (PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC)func()
  continue;
}

if(strcmp("glClipControl",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClipControl");
  (PFNGLCLIPCONTROLPROC)func()
  continue;
}

if(strcmp("glBindTextureUnit",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindTextureUnit");
  (PFNGLBINDTEXTUREUNITPROC)func()
  continue;
}

if(strcmp("glBlitNamedFramebuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlitNamedFramebuffer");
  (PFNGLBLITNAMEDFRAMEBUFFERPROC)func()
  continue;
}

if(strcmp("glCheckNamedFramebufferStatus",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCheckNamedFramebufferStatus");
  (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC)func()
  continue;
}

if(strcmp("glClearNamedBufferData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearNamedBufferData");
  (PFNGLCLEARNAMEDBUFFERDATAPROC)func()
  continue;
}

if(strcmp("glClearNamedBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearNamedBufferSubData");
  (PFNGLCLEARNAMEDBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glClearNamedFramebufferfi",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearNamedFramebufferfi");
  (PFNGLCLEARNAMEDFRAMEBUFFERFIPROC)func()
  continue;
}

if(strcmp("glClearNamedFramebufferfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearNamedFramebufferfv");
  (PFNGLCLEARNAMEDFRAMEBUFFERFVPROC)func()
  continue;
}

if(strcmp("glClearNamedFramebufferiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearNamedFramebufferiv");
  (PFNGLCLEARNAMEDFRAMEBUFFERIVPROC)func()
  continue;
}

if(strcmp("glClearNamedFramebufferuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearNamedFramebufferuiv");
  (PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC)func()
  continue;
}

if(strcmp("glCompressedTextureSubImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTextureSubImage1D");
  (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC)func()
  continue;
}

if(strcmp("glCompressedTextureSubImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTextureSubImage2D");
  (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC)func()
  continue;
}

if(strcmp("glCompressedTextureSubImage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCompressedTextureSubImage3D");
  (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC)func()
  continue;
}

if(strcmp("glCopyNamedBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyNamedBufferSubData");
  (PFNGLCOPYNAMEDBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glCopyTextureSubImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyTextureSubImage1D");
  (PFNGLCOPYTEXTURESUBIMAGE1DPROC)func()
  continue;
}

if(strcmp("glCopyTextureSubImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyTextureSubImage2D");
  (PFNGLCOPYTEXTURESUBIMAGE2DPROC)func()
  continue;
}

if(strcmp("glCopyTextureSubImage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCopyTextureSubImage3D");
  (PFNGLCOPYTEXTURESUBIMAGE3DPROC)func()
  continue;
}

if(strcmp("glCreateBuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateBuffers");
  (PFNGLCREATEBUFFERSPROC)func()
  continue;
}

if(strcmp("glCreateFramebuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateFramebuffers");
  (PFNGLCREATEFRAMEBUFFERSPROC)func()
  continue;
}

if(strcmp("glCreateProgramPipelines",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateProgramPipelines");
  (PFNGLCREATEPROGRAMPIPELINESPROC)func()
  continue;
}

if(strcmp("glCreateQueries",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateQueries");
  (PFNGLCREATEQUERIESPROC)func()
  continue;
}

if(strcmp("glCreateRenderbuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateRenderbuffers");
  (PFNGLCREATERENDERBUFFERSPROC)func()
  continue;
}

if(strcmp("glCreateSamplers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateSamplers");
  (PFNGLCREATESAMPLERSPROC)func()
  continue;
}

if(strcmp("glCreateTextures",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateTextures");
  (PFNGLCREATETEXTURESPROC)func()
  continue;
}

if(strcmp("glCreateTransformFeedbacks",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateTransformFeedbacks");
  (PFNGLCREATETRANSFORMFEEDBACKSPROC)func()
  continue;
}

if(strcmp("glCreateVertexArrays",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateVertexArrays");
  (PFNGLCREATEVERTEXARRAYSPROC)func()
  continue;
}

if(strcmp("glDisableVertexArrayAttrib",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDisableVertexArrayAttrib");
  (PFNGLDISABLEVERTEXARRAYATTRIBPROC)func()
  continue;
}

if(strcmp("glEnableVertexArrayAttrib",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEnableVertexArrayAttrib");
  (PFNGLENABLEVERTEXARRAYATTRIBPROC)func()
  continue;
}

if(strcmp("glFlushMappedNamedBufferRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFlushMappedNamedBufferRange");
  (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC)func()
  continue;
}

if(strcmp("glGenerateTextureMipmap",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenerateTextureMipmap");
  (PFNGLGENERATETEXTUREMIPMAPPROC)func()
  continue;
}

if(strcmp("glGetCompressedTextureImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetCompressedTextureImage");
  (PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC)func()
  continue;
}

if(strcmp("glGetNamedBufferParameteri64v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetNamedBufferParameteri64v");
  (PFNGLGETNAMEDBUFFERPARAMETERI64VPROC)func()
  continue;
}

if(strcmp("glGetNamedBufferParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetNamedBufferParameteriv");
  (PFNGLGETNAMEDBUFFERPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetNamedBufferPointerv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetNamedBufferPointerv");
  (PFNGLGETNAMEDBUFFERPOINTERVPROC)func()
  continue;
}

if(strcmp("glGetNamedBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetNamedBufferSubData");
  (PFNGLGETNAMEDBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glGetNamedFramebufferAttachmentParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetNamedFramebufferAttachmentParameteriv");
  (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetNamedFramebufferParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetNamedFramebufferParameteriv");
  (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetNamedRenderbufferParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetNamedRenderbufferParameteriv");
  (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetQueryBufferObjecti64v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryBufferObjecti64v");
  (PFNGLGETQUERYBUFFEROBJECTI64VPROC)func()
  continue;
}

if(strcmp("glGetQueryBufferObjectiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryBufferObjectiv");
  (PFNGLGETQUERYBUFFEROBJECTIVPROC)func()
  continue;
}

if(strcmp("glGetQueryBufferObjectui64v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryBufferObjectui64v");
  (PFNGLGETQUERYBUFFEROBJECTUI64VPROC)func()
  continue;
}

if(strcmp("glGetQueryBufferObjectuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetQueryBufferObjectuiv");
  (PFNGLGETQUERYBUFFEROBJECTUIVPROC)func()
  continue;
}

if(strcmp("glGetTextureImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTextureImage");
  (PFNGLGETTEXTUREIMAGEPROC)func()
  continue;
}

if(strcmp("glGetTextureLevelParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTextureLevelParameterfv");
  (PFNGLGETTEXTURELEVELPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetTextureLevelParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTextureLevelParameteriv");
  (PFNGLGETTEXTURELEVELPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetTextureParameterIiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTextureParameterIiv");
  (PFNGLGETTEXTUREPARAMETERIIVPROC)func()
  continue;
}

if(strcmp("glGetTextureParameterIuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTextureParameterIuiv");
  (PFNGLGETTEXTUREPARAMETERIUIVPROC)func()
  continue;
}

if(strcmp("glGetTextureParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTextureParameterfv");
  (PFNGLGETTEXTUREPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glGetTextureParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTextureParameteriv");
  (PFNGLGETTEXTUREPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glGetTransformFeedbacki64_v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTransformFeedbacki64_v");
  (PFNGLGETTRANSFORMFEEDBACKI64_VPROC)func()
  continue;
}

if(strcmp("glGetTransformFeedbacki_v",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTransformFeedbacki_v");
  (PFNGLGETTRANSFORMFEEDBACKI_VPROC)func()
  continue;
}

if(strcmp("glGetTransformFeedbackiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTransformFeedbackiv");
  (PFNGLGETTRANSFORMFEEDBACKIVPROC)func()
  continue;
}

if(strcmp("glGetVertexArrayIndexed64iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexArrayIndexed64iv");
  (PFNGLGETVERTEXARRAYINDEXED64IVPROC)func()
  continue;
}

if(strcmp("glGetVertexArrayIndexediv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexArrayIndexediv");
  (PFNGLGETVERTEXARRAYINDEXEDIVPROC)func()
  continue;
}

if(strcmp("glGetVertexArrayiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexArrayiv");
  (PFNGLGETVERTEXARRAYIVPROC)func()
  continue;
}

if(strcmp("glInvalidateNamedFramebufferData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInvalidateNamedFramebufferData");
  (PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC)func()
  continue;
}

if(strcmp("glInvalidateNamedFramebufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInvalidateNamedFramebufferSubData");
  (PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glMapNamedBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMapNamedBuffer");
  (PFNGLMAPNAMEDBUFFERPROC)func()
  continue;
}

if(strcmp("glMapNamedBufferRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMapNamedBufferRange");
  (PFNGLMAPNAMEDBUFFERRANGEPROC)func()
  continue;
}

if(strcmp("glNamedBufferData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedBufferData");
  (PFNGLNAMEDBUFFERDATAPROC)func()
  continue;
}

if(strcmp("glNamedBufferStorage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedBufferStorage");
  (PFNGLNAMEDBUFFERSTORAGEPROC)func()
  continue;
}

if(strcmp("glNamedBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedBufferSubData");
  (PFNGLNAMEDBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glNamedFramebufferDrawBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedFramebufferDrawBuffer");
  (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC)func()
  continue;
}

if(strcmp("glNamedFramebufferDrawBuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedFramebufferDrawBuffers");
  (PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC)func()
  continue;
}

if(strcmp("glNamedFramebufferParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedFramebufferParameteri");
  (PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC)func()
  continue;
}

if(strcmp("glNamedFramebufferReadBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedFramebufferReadBuffer");
  (PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC)func()
  continue;
}

if(strcmp("glNamedFramebufferRenderbuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedFramebufferRenderbuffer");
  (PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC)func()
  continue;
}

if(strcmp("glNamedFramebufferTexture",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedFramebufferTexture");
  (PFNGLNAMEDFRAMEBUFFERTEXTUREPROC)func()
  continue;
}

if(strcmp("glNamedFramebufferTextureLayer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedFramebufferTextureLayer");
  (PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC)func()
  continue;
}

if(strcmp("glNamedRenderbufferStorage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedRenderbufferStorage");
  (PFNGLNAMEDRENDERBUFFERSTORAGEPROC)func()
  continue;
}

if(strcmp("glNamedRenderbufferStorageMultisample",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNamedRenderbufferStorageMultisample");
  (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC)func()
  continue;
}

if(strcmp("glTextureBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureBuffer");
  (PFNGLTEXTUREBUFFERPROC)func()
  continue;
}

if(strcmp("glTextureBufferRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureBufferRange");
  (PFNGLTEXTUREBUFFERRANGEPROC)func()
  continue;
}

if(strcmp("glTextureParameterIiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureParameterIiv");
  (PFNGLTEXTUREPARAMETERIIVPROC)func()
  continue;
}

if(strcmp("glTextureParameterIuiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureParameterIuiv");
  (PFNGLTEXTUREPARAMETERIUIVPROC)func()
  continue;
}

if(strcmp("glTextureParameterf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureParameterf");
  (PFNGLTEXTUREPARAMETERFPROC)func()
  continue;
}

if(strcmp("glTextureParameterfv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureParameterfv");
  (PFNGLTEXTUREPARAMETERFVPROC)func()
  continue;
}

if(strcmp("glTextureParameteri",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureParameteri");
  (PFNGLTEXTUREPARAMETERIPROC)func()
  continue;
}

if(strcmp("glTextureParameteriv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureParameteriv");
  (PFNGLTEXTUREPARAMETERIVPROC)func()
  continue;
}

if(strcmp("glTextureStorage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureStorage1D");
  (PFNGLTEXTURESTORAGE1DPROC)func()
  continue;
}

if(strcmp("glTextureStorage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureStorage2D");
  (PFNGLTEXTURESTORAGE2DPROC)func()
  continue;
}

if(strcmp("glTextureStorage2DMultisample",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureStorage2DMultisample");
  (PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC)func()
  continue;
}

if(strcmp("glTextureStorage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureStorage3D");
  (PFNGLTEXTURESTORAGE3DPROC)func()
  continue;
}

if(strcmp("glTextureStorage3DMultisample",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureStorage3DMultisample");
  (PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC)func()
  continue;
}

if(strcmp("glTextureSubImage1D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureSubImage1D");
  (PFNGLTEXTURESUBIMAGE1DPROC)func()
  continue;
}

if(strcmp("glTextureSubImage2D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureSubImage2D");
  (PFNGLTEXTURESUBIMAGE2DPROC)func()
  continue;
}

if(strcmp("glTextureSubImage3D",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureSubImage3D");
  (PFNGLTEXTURESUBIMAGE3DPROC)func()
  continue;
}

if(strcmp("glTransformFeedbackBufferBase",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTransformFeedbackBufferBase");
  (PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC)func()
  continue;
}

if(strcmp("glTransformFeedbackBufferRange",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTransformFeedbackBufferRange");
  (PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC)func()
  continue;
}

if(strcmp("glUnmapNamedBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUnmapNamedBuffer");
  (PFNGLUNMAPNAMEDBUFFERPROC)func()
  continue;
}

if(strcmp("glVertexArrayAttribBinding",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexArrayAttribBinding");
  (PFNGLVERTEXARRAYATTRIBBINDINGPROC)func()
  continue;
}

if(strcmp("glVertexArrayAttribFormat",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexArrayAttribFormat");
  (PFNGLVERTEXARRAYATTRIBFORMATPROC)func()
  continue;
}

if(strcmp("glVertexArrayAttribIFormat",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexArrayAttribIFormat");
  (PFNGLVERTEXARRAYATTRIBIFORMATPROC)func()
  continue;
}

if(strcmp("glVertexArrayAttribLFormat",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexArrayAttribLFormat");
  (PFNGLVERTEXARRAYATTRIBLFORMATPROC)func()
  continue;
}

if(strcmp("glVertexArrayBindingDivisor",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexArrayBindingDivisor");
  (PFNGLVERTEXARRAYBINDINGDIVISORPROC)func()
  continue;
}

if(strcmp("glVertexArrayElementBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexArrayElementBuffer");
  (PFNGLVERTEXARRAYELEMENTBUFFERPROC)func()
  continue;
}

if(strcmp("glVertexArrayVertexBuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexArrayVertexBuffer");
  (PFNGLVERTEXARRAYVERTEXBUFFERPROC)func()
  continue;
}

if(strcmp("glVertexArrayVertexBuffers",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexArrayVertexBuffers");
  (PFNGLVERTEXARRAYVERTEXBUFFERSPROC)func()
  continue;
}

if(strcmp("glGetCompressedTextureSubImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetCompressedTextureSubImage");
  (PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC)func()
  continue;
}

if(strcmp("glGetTextureSubImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTextureSubImage");
  (PFNGLGETTEXTURESUBIMAGEPROC)func()
  continue;
}

if(strcmp("glInvalidateBufferData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInvalidateBufferData");
  (PFNGLINVALIDATEBUFFERDATAPROC)func()
  continue;
}

if(strcmp("glInvalidateBufferSubData",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInvalidateBufferSubData");
  (PFNGLINVALIDATEBUFFERSUBDATAPROC)func()
  continue;
}

if(strcmp("glInvalidateFramebuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInvalidateFramebuffer");
  (PFNGLINVALIDATEFRAMEBUFFERPROC)func()
  continue;
}

if(strcmp("glInvalidateSubFramebuffer",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInvalidateSubFramebuffer");
  (PFNGLINVALIDATESUBFRAMEBUFFERPROC)func()
  continue;
}

if(strcmp("glInvalidateTexImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInvalidateTexImage");
  (PFNGLINVALIDATETEXIMAGEPROC)func()
  continue;
}

if(strcmp("glInvalidateTexSubImage",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glInvalidateTexSubImage");
  (PFNGLINVALIDATETEXSUBIMAGEPROC)func()
  continue;
}

if(strcmp("glPolygonOffsetEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPolygonOffsetEXT");
  (PFNGLPOLYGONOFFSETEXTPROC)func()
  continue;
}

if(strcmp("glDrawTexfOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTexfOES");
  (PFNGLDRAWTEXFOESPROC)func()
  continue;
}

if(strcmp("glDrawTexfvOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTexfvOES");
  (PFNGLDRAWTEXFVOESPROC)func()
  continue;
}

if(strcmp("glDrawTexiOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTexiOES");
  (PFNGLDRAWTEXIOESPROC)func()
  continue;
}

if(strcmp("glDrawTexivOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTexivOES");
  (PFNGLDRAWTEXIVOESPROC)func()
  continue;
}

if(strcmp("glDrawTexsOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTexsOES");
  (PFNGLDRAWTEXSOESPROC)func()
  continue;
}

if(strcmp("glDrawTexsvOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTexsvOES");
  (PFNGLDRAWTEXSVOESPROC)func()
  continue;
}

if(strcmp("glDrawTexxOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTexxOES");
  (PFNGLDRAWTEXXOESPROC)func()
  continue;
}

if(strcmp("glDrawTexxvOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDrawTexxvOES");
  (PFNGLDRAWTEXXVOESPROC)func()
  continue;
}

if(strcmp("glPointSizePointerOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointSizePointerOES");
  (PFNGLPOINTSIZEPOINTEROESPROC)func()
  continue;
}

if(strcmp("glQueryMatrixxOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glQueryMatrixxOES");
  (PFNGLQUERYMATRIXXOESPROC)func()
  continue;
}

if(strcmp("glSampleMaskSGIS",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSampleMaskSGIS");
  (PFNGLSAMPLEMASKSGISPROC)func()
  continue;
}

if(strcmp("glSamplePatternSGIS",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSamplePatternSGIS");
  (PFNGLSAMPLEPATTERNSGISPROC)func()
  continue;
}

if(strcmp("glColorPointerEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorPointerEXT");
  (PFNGLCOLORPOINTEREXTPROC)func()
  continue;
}

if(strcmp("glEdgeFlagPointerEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEdgeFlagPointerEXT");
  (PFNGLEDGEFLAGPOINTEREXTPROC)func()
  continue;
}

if(strcmp("glIndexPointerEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIndexPointerEXT");
  (PFNGLINDEXPOINTEREXTPROC)func()
  continue;
}

if(strcmp("glNormalPointerEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormalPointerEXT");
  (PFNGLNORMALPOINTEREXTPROC)func()
  continue;
}

if(strcmp("glTexCoordPointerEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexCoordPointerEXT");
  (PFNGLTEXCOORDPOINTEREXTPROC)func()
  continue;
}

if(strcmp("glVertexPointerEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexPointerEXT");
  (PFNGLVERTEXPOINTEREXTPROC)func()
  continue;
}

if(strcmp("glDiscardFramebufferEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDiscardFramebufferEXT");
  (PFNGLDISCARDFRAMEBUFFEREXTPROC)func()
  continue;
}

if(strcmp("glActiveShaderProgram",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glActiveShaderProgram");
  (PFNGLACTIVESHADERPROGRAMPROC)func()
  continue;
}

if(strcmp("glBindProgramPipeline",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindProgramPipeline");
  (PFNGLBINDPROGRAMPIPELINEPROC)func()
  continue;
}

if(strcmp("glCreateShaderProgramv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateShaderProgramv");
  (PFNGLCREATESHADERPROGRAMVPROC)func()
  continue;
}

if(strcmp("glDeleteProgramPipelines",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteProgramPipelines");
  (PFNGLDELETEPROGRAMPIPELINESPROC)func()
  continue;
}

if(strcmp("glGenProgramPipelines",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenProgramPipelines");
  (PFNGLGENPROGRAMPIPELINESPROC)func()
  continue;
}

if(strcmp("glGetProgramPipelineInfoLog",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramPipelineInfoLog");
  (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)func()
  continue;
}

if(strcmp("glGetProgramPipelineiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramPipelineiv");
  (PFNGLGETPROGRAMPIPELINEIVPROC)func()
  continue;
}

if(strcmp("glIsProgramPipeline",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glIsProgramPipeline");
  (PFNGLISPROGRAMPIPELINEPROC)func()
  continue;
}

if(strcmp("glLockArraysEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLockArraysEXT");
  (PFNGLLOCKARRAYSEXTPROC)func()
  continue;
}

if(strcmp("glProgramUniform1d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform1d");
  (PFNGLPROGRAMUNIFORM1DPROC)func()
  continue;
}

if(strcmp("glProgramUniform1dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform1dv");
  (PFNGLPROGRAMUNIFORM1DVPROC)func()
  continue;
}

if(strcmp("glProgramUniform1f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform1f");
  (PFNGLPROGRAMUNIFORM1FPROC)func()
  continue;
}

if(strcmp("glProgramUniform1fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform1fv");
  (PFNGLPROGRAMUNIFORM1FVPROC)func()
  continue;
}

if(strcmp("glProgramUniform1i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform1i");
  (PFNGLPROGRAMUNIFORM1IPROC)func()
  continue;
}

if(strcmp("glProgramUniform1iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform1iv");
  (PFNGLPROGRAMUNIFORM1IVPROC)func()
  continue;
}

if(strcmp("glProgramUniform1ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform1ui");
  (PFNGLPROGRAMUNIFORM1UIPROC)func()
  continue;
}

if(strcmp("glProgramUniform1uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform1uiv");
  (PFNGLPROGRAMUNIFORM1UIVPROC)func()
  continue;
}

if(strcmp("glProgramUniform2d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform2d");
  (PFNGLPROGRAMUNIFORM2DPROC)func()
  continue;
}

if(strcmp("glProgramUniform2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform2dv");
  (PFNGLPROGRAMUNIFORM2DVPROC)func()
  continue;
}

if(strcmp("glProgramUniform2f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform2f");
  (PFNGLPROGRAMUNIFORM2FPROC)func()
  continue;
}

if(strcmp("glProgramUniform2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform2fv");
  (PFNGLPROGRAMUNIFORM2FVPROC)func()
  continue;
}

if(strcmp("glProgramUniform2i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform2i");
  (PFNGLPROGRAMUNIFORM2IPROC)func()
  continue;
}

if(strcmp("glProgramUniform2iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform2iv");
  (PFNGLPROGRAMUNIFORM2IVPROC)func()
  continue;
}

if(strcmp("glProgramUniform2ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform2ui");
  (PFNGLPROGRAMUNIFORM2UIPROC)func()
  continue;
}

if(strcmp("glProgramUniform2uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform2uiv");
  (PFNGLPROGRAMUNIFORM2UIVPROC)func()
  continue;
}

if(strcmp("glProgramUniform3d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform3d");
  (PFNGLPROGRAMUNIFORM3DPROC)func()
  continue;
}

if(strcmp("glProgramUniform3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform3dv");
  (PFNGLPROGRAMUNIFORM3DVPROC)func()
  continue;
}

if(strcmp("glProgramUniform3f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform3f");
  (PFNGLPROGRAMUNIFORM3FPROC)func()
  continue;
}

if(strcmp("glProgramUniform3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform3fv");
  (PFNGLPROGRAMUNIFORM3FVPROC)func()
  continue;
}

if(strcmp("glProgramUniform3i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform3i");
  (PFNGLPROGRAMUNIFORM3IPROC)func()
  continue;
}

if(strcmp("glProgramUniform3iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform3iv");
  (PFNGLPROGRAMUNIFORM3IVPROC)func()
  continue;
}

if(strcmp("glProgramUniform3ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform3ui");
  (PFNGLPROGRAMUNIFORM3UIPROC)func()
  continue;
}

if(strcmp("glProgramUniform3uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform3uiv");
  (PFNGLPROGRAMUNIFORM3UIVPROC)func()
  continue;
}

if(strcmp("glProgramUniform4d",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform4d");
  (PFNGLPROGRAMUNIFORM4DPROC)func()
  continue;
}

if(strcmp("glProgramUniform4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform4dv");
  (PFNGLPROGRAMUNIFORM4DVPROC)func()
  continue;
}

if(strcmp("glProgramUniform4f",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform4f");
  (PFNGLPROGRAMUNIFORM4FPROC)func()
  continue;
}

if(strcmp("glProgramUniform4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform4fv");
  (PFNGLPROGRAMUNIFORM4FVPROC)func()
  continue;
}

if(strcmp("glProgramUniform4i",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform4i");
  (PFNGLPROGRAMUNIFORM4IPROC)func()
  continue;
}

if(strcmp("glProgramUniform4iv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform4iv");
  (PFNGLPROGRAMUNIFORM4IVPROC)func()
  continue;
}

if(strcmp("glProgramUniform4ui",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform4ui");
  (PFNGLPROGRAMUNIFORM4UIPROC)func()
  continue;
}

if(strcmp("glProgramUniform4uiv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniform4uiv");
  (PFNGLPROGRAMUNIFORM4UIVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix2dv");
  (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix2fv");
  (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix2x3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix2x3dv");
  (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix2x3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix2x3fv");
  (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix2x4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix2x4dv");
  (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix2x4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix2x4fv");
  (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix3dv");
  (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix3fv");
  (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix3x2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix3x2dv");
  (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix3x2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix3x2fv");
  (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix3x4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix3x4dv");
  (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix3x4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix3x4fv");
  (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix4dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix4dv");
  (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix4fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix4fv");
  (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix4x2dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix4x2dv");
  (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix4x2fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix4x2fv");
  (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix4x3dv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix4x3dv");
  (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)func()
  continue;
}

if(strcmp("glProgramUniformMatrix4x3fv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramUniformMatrix4x3fv");
  (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)func()
  continue;
}

if(strcmp("glUnlockArraysEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUnlockArraysEXT");
  (PFNGLUNLOCKARRAYSEXTPROC)func()
  continue;
}

if(strcmp("glUseProgramStages",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUseProgramStages");
  (PFNGLUSEPROGRAMSTAGESPROC)func()
  continue;
}

if(strcmp("glValidateProgramPipeline",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glValidateProgramPipeline");
  (PFNGLVALIDATEPROGRAMPIPELINEPROC)func()
  continue;
}

if(strcmp("glDebugMessageCallback",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDebugMessageCallback");
  (PFNGLDEBUGMESSAGECALLBACKPROC)func()
  continue;
}

if(strcmp("glDebugMessageControl",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDebugMessageControl");
  (PFNGLDEBUGMESSAGECONTROLPROC)func()
  continue;
}

if(strcmp("glDebugMessageInsert",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDebugMessageInsert");
  (PFNGLDEBUGMESSAGEINSERTPROC)func()
  continue;
}

if(strcmp("glGetDebugMessageLog",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetDebugMessageLog");
  (PFNGLGETDEBUGMESSAGELOGPROC)func()
  continue;
}

if(strcmp("glGetObjectLabel",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetObjectLabel");
  (PFNGLGETOBJECTLABELPROC)func()
  continue;
}

if(strcmp("glGetObjectPtrLabel",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetObjectPtrLabel");
  (PFNGLGETOBJECTPTRLABELPROC)func()
  continue;
}

if(strcmp("glObjectLabel",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glObjectLabel");
  (PFNGLOBJECTLABELPROC)func()
  continue;
}

if(strcmp("glObjectPtrLabel",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glObjectPtrLabel");
  (PFNGLOBJECTPTRLABELPROC)func()
  continue;
}

if(strcmp("glPopDebugGroup",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPopDebugGroup");
  (PFNGLPOPDEBUGGROUPPROC)func()
  continue;
}

if(strcmp("glPushDebugGroup",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPushDebugGroup");
  (PFNGLPUSHDEBUGGROUPPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3fEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3fEXT");
  (PFNGLSECONDARYCOLOR3FEXTPROC)func()
  continue;
}

if(strcmp("glSecondaryColor3fvEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSecondaryColor3fvEXT");
  (PFNGLSECONDARYCOLOR3FVEXTPROC)func()
  continue;
}

if(strcmp("glMultiDrawElementsEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiDrawElementsEXT");
  (PFNGLMULTIDRAWELEMENTSEXTPROC)func()
  continue;
}

if(strcmp("glFogCoordfEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogCoordfEXT");
  (PFNGLFOGCOORDFEXTPROC)func()
  continue;
}

if(strcmp("glFogCoordfvEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogCoordfvEXT");
  (PFNGLFOGCOORDFVEXTPROC)func()
  continue;
}

if(strcmp("glResizeBuffersMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glResizeBuffersMESA");
  (PFNGLRESIZEBUFFERSMESAPROC)func()
  continue;
}

if(strcmp("glWindowPos4dMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos4dMESA");
  (PFNGLWINDOWPOS4DMESAPROC)func()
  continue;
}

if(strcmp("glWindowPos4dvMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos4dvMESA");
  (PFNGLWINDOWPOS4DVMESAPROC)func()
  continue;
}

if(strcmp("glWindowPos4fMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos4fMESA");
  (PFNGLWINDOWPOS4FMESAPROC)func()
  continue;
}

if(strcmp("glWindowPos4fvMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos4fvMESA");
  (PFNGLWINDOWPOS4FVMESAPROC)func()
  continue;
}

if(strcmp("glWindowPos4iMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos4iMESA");
  (PFNGLWINDOWPOS4IMESAPROC)func()
  continue;
}

if(strcmp("glWindowPos4ivMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos4ivMESA");
  (PFNGLWINDOWPOS4IVMESAPROC)func()
  continue;
}

if(strcmp("glWindowPos4sMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos4sMESA");
  (PFNGLWINDOWPOS4SMESAPROC)func()
  continue;
}

if(strcmp("glWindowPos4svMESA",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowPos4svMESA");
  (PFNGLWINDOWPOS4SVMESAPROC)func()
  continue;
}

if(strcmp("glMultiModeDrawArraysIBM",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiModeDrawArraysIBM");
  (PFNGLMULTIMODEDRAWARRAYSIBMPROC)func()
  continue;
}

if(strcmp("glMultiModeDrawElementsIBM",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiModeDrawElementsIBM");
  (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)func()
  continue;
}

if(strcmp("glAreProgramsResidentNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAreProgramsResidentNV");
  (PFNGLAREPROGRAMSRESIDENTNVPROC)func()
  continue;
}

if(strcmp("glExecuteProgramNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glExecuteProgramNV");
  (PFNGLEXECUTEPROGRAMNVPROC)func()
  continue;
}

if(strcmp("glGetProgramParameterdvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramParameterdvNV");
  (PFNGLGETPROGRAMPARAMETERDVNVPROC)func()
  continue;
}

if(strcmp("glGetProgramParameterfvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramParameterfvNV");
  (PFNGLGETPROGRAMPARAMETERFVNVPROC)func()
  continue;
}

if(strcmp("glGetProgramStringNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramStringNV");
  (PFNGLGETPROGRAMSTRINGNVPROC)func()
  continue;
}

if(strcmp("glGetProgramivNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramivNV");
  (PFNGLGETPROGRAMIVNVPROC)func()
  continue;
}

if(strcmp("glGetTrackMatrixivNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTrackMatrixivNV");
  (PFNGLGETTRACKMATRIXIVNVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribdvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribdvNV");
  (PFNGLGETVERTEXATTRIBDVNVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribfvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribfvNV");
  (PFNGLGETVERTEXATTRIBFVNVPROC)func()
  continue;
}

if(strcmp("glGetVertexAttribivNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetVertexAttribivNV");
  (PFNGLGETVERTEXATTRIBIVNVPROC)func()
  continue;
}

if(strcmp("glLoadProgramNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLoadProgramNV");
  (PFNGLLOADPROGRAMNVPROC)func()
  continue;
}

if(strcmp("glProgramParameters4dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramParameters4dvNV");
  (PFNGLPROGRAMPARAMETERS4DVNVPROC)func()
  continue;
}

if(strcmp("glProgramParameters4fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramParameters4fvNV");
  (PFNGLPROGRAMPARAMETERS4FVNVPROC)func()
  continue;
}

if(strcmp("glRequestResidentProgramsNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRequestResidentProgramsNV");
  (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)func()
  continue;
}

if(strcmp("glTrackMatrixNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTrackMatrixNV");
  (PFNGLTRACKMATRIXNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1dNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1dNV");
  (PFNGLVERTEXATTRIB1DNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1dvNV");
  (PFNGLVERTEXATTRIB1DVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1fNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1fNV");
  (PFNGLVERTEXATTRIB1FNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1fvNV");
  (PFNGLVERTEXATTRIB1FVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1sNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1sNV");
  (PFNGLVERTEXATTRIB1SNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib1svNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib1svNV");
  (PFNGLVERTEXATTRIB1SVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2dNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2dNV");
  (PFNGLVERTEXATTRIB2DNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2dvNV");
  (PFNGLVERTEXATTRIB2DVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2fNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2fNV");
  (PFNGLVERTEXATTRIB2FNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2fvNV");
  (PFNGLVERTEXATTRIB2FVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2sNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2sNV");
  (PFNGLVERTEXATTRIB2SNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib2svNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib2svNV");
  (PFNGLVERTEXATTRIB2SVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3dNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3dNV");
  (PFNGLVERTEXATTRIB3DNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3dvNV");
  (PFNGLVERTEXATTRIB3DVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3fNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3fNV");
  (PFNGLVERTEXATTRIB3FNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3fvNV");
  (PFNGLVERTEXATTRIB3FVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3sNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3sNV");
  (PFNGLVERTEXATTRIB3SNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib3svNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib3svNV");
  (PFNGLVERTEXATTRIB3SVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4dNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4dNV");
  (PFNGLVERTEXATTRIB4DNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4dvNV");
  (PFNGLVERTEXATTRIB4DVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4fNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4fNV");
  (PFNGLVERTEXATTRIB4FNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4fvNV");
  (PFNGLVERTEXATTRIB4FVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4sNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4sNV");
  (PFNGLVERTEXATTRIB4SNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4svNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4svNV");
  (PFNGLVERTEXATTRIB4SVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4ubNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4ubNV");
  (PFNGLVERTEXATTRIB4UBNVPROC)func()
  continue;
}

if(strcmp("glVertexAttrib4ubvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttrib4ubvNV");
  (PFNGLVERTEXATTRIB4UBVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribPointerNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribPointerNV");
  (PFNGLVERTEXATTRIBPOINTERNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs1dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs1dvNV");
  (PFNGLVERTEXATTRIBS1DVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs1fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs1fvNV");
  (PFNGLVERTEXATTRIBS1FVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs1svNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs1svNV");
  (PFNGLVERTEXATTRIBS1SVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs2dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs2dvNV");
  (PFNGLVERTEXATTRIBS2DVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs2fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs2fvNV");
  (PFNGLVERTEXATTRIBS2FVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs2svNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs2svNV");
  (PFNGLVERTEXATTRIBS2SVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs3dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs3dvNV");
  (PFNGLVERTEXATTRIBS3DVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs3fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs3fvNV");
  (PFNGLVERTEXATTRIBS3FVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs3svNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs3svNV");
  (PFNGLVERTEXATTRIBS3SVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs4dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs4dvNV");
  (PFNGLVERTEXATTRIBS4DVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs4fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs4fvNV");
  (PFNGLVERTEXATTRIBS4FVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs4svNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs4svNV");
  (PFNGLVERTEXATTRIBS4SVNVPROC)func()
  continue;
}

if(strcmp("glVertexAttribs4ubvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribs4ubvNV");
  (PFNGLVERTEXATTRIBS4UBVNVPROC)func()
  continue;
}

if(strcmp("glGetTexBumpParameterfvATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexBumpParameterfvATI");
  (PFNGLGETTEXBUMPPARAMETERFVATIPROC)func()
  continue;
}

if(strcmp("glGetTexBumpParameterivATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexBumpParameterivATI");
  (PFNGLGETTEXBUMPPARAMETERIVATIPROC)func()
  continue;
}

if(strcmp("glTexBumpParameterfvATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexBumpParameterfvATI");
  (PFNGLTEXBUMPPARAMETERFVATIPROC)func()
  continue;
}

if(strcmp("glTexBumpParameterivATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexBumpParameterivATI");
  (PFNGLTEXBUMPPARAMETERIVATIPROC)func()
  continue;
}

if(strcmp("glAlphaFragmentOp1ATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAlphaFragmentOp1ATI");
  (PFNGLALPHAFRAGMENTOP1ATIPROC)func()
  continue;
}

if(strcmp("glAlphaFragmentOp2ATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAlphaFragmentOp2ATI");
  (PFNGLALPHAFRAGMENTOP2ATIPROC)func()
  continue;
}

if(strcmp("glAlphaFragmentOp3ATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAlphaFragmentOp3ATI");
  (PFNGLALPHAFRAGMENTOP3ATIPROC)func()
  continue;
}

if(strcmp("glBeginFragmentShaderATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBeginFragmentShaderATI");
  (PFNGLBEGINFRAGMENTSHADERATIPROC)func()
  continue;
}

if(strcmp("glBindFragmentShaderATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindFragmentShaderATI");
  (PFNGLBINDFRAGMENTSHADERATIPROC)func()
  continue;
}

if(strcmp("glColorFragmentOp1ATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorFragmentOp1ATI");
  (PFNGLCOLORFRAGMENTOP1ATIPROC)func()
  continue;
}

if(strcmp("glColorFragmentOp2ATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorFragmentOp2ATI");
  (PFNGLCOLORFRAGMENTOP2ATIPROC)func()
  continue;
}

if(strcmp("glColorFragmentOp3ATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColorFragmentOp3ATI");
  (PFNGLCOLORFRAGMENTOP3ATIPROC)func()
  continue;
}

if(strcmp("glDeleteFragmentShaderATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeleteFragmentShaderATI");
  (PFNGLDELETEFRAGMENTSHADERATIPROC)func()
  continue;
}

if(strcmp("glEndFragmentShaderATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEndFragmentShaderATI");
  (PFNGLENDFRAGMENTSHADERATIPROC)func()
  continue;
}

if(strcmp("glGenFragmentShadersATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenFragmentShadersATI");
  (PFNGLGENFRAGMENTSHADERSATIPROC)func()
  continue;
}

if(strcmp("glPassTexCoordATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPassTexCoordATI");
  (PFNGLPASSTEXCOORDATIPROC)func()
  continue;
}

if(strcmp("glSampleMapATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSampleMapATI");
  (PFNGLSAMPLEMAPATIPROC)func()
  continue;
}

if(strcmp("glSetFragmentShaderConstantATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSetFragmentShaderConstantATI");
  (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)func()
  continue;
}

if(strcmp("glDepthRangeArrayfvOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthRangeArrayfvOES");
  (PFNGLDEPTHRANGEARRAYFVOESPROC)func()
  continue;
}

if(strcmp("glDepthRangeIndexedfOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthRangeIndexedfOES");
  (PFNGLDEPTHRANGEINDEXEDFOESPROC)func()
  continue;
}

if(strcmp("glActiveStencilFaceEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glActiveStencilFaceEXT");
  (PFNGLACTIVESTENCILFACEEXTPROC)func()
  continue;
}

if(strcmp("glBindVertexArrayAPPLE",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindVertexArrayAPPLE");
  (PFNGLBINDVERTEXARRAYAPPLEPROC)func()
  continue;
}

if(strcmp("glGenVertexArraysAPPLE",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenVertexArraysAPPLE");
  (PFNGLGENVERTEXARRAYSAPPLEPROC)func()
  continue;
}

if(strcmp("glGetProgramNamedParameterdvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramNamedParameterdvNV");
  (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)func()
  continue;
}

if(strcmp("glGetProgramNamedParameterfvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetProgramNamedParameterfvNV");
  (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)func()
  continue;
}

if(strcmp("glProgramNamedParameter4dNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramNamedParameter4dNV");
  (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)func()
  continue;
}

if(strcmp("glProgramNamedParameter4dvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramNamedParameter4dvNV");
  (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)func()
  continue;
}

if(strcmp("glProgramNamedParameter4fNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramNamedParameter4fNV");
  (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)func()
  continue;
}

if(strcmp("glProgramNamedParameter4fvNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramNamedParameter4fvNV");
  (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)func()
  continue;
}

if(strcmp("glPrimitiveRestartNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPrimitiveRestartNV");
  (PFNGLPRIMITIVERESTARTNVPROC)func()
  continue;
}

if(strcmp("glGetTexGenxvOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexGenxvOES");
  (PFNGLGETTEXGENXVOESPROC)func()
  continue;
}

if(strcmp("glTexGenxOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexGenxOES");
  (PFNGLTEXGENXOESPROC)func()
  continue;
}

if(strcmp("glTexGenxvOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexGenxvOES");
  (PFNGLTEXGENXVOESPROC)func()
  continue;
}

if(strcmp("glDepthBoundsEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthBoundsEXT");
  (PFNGLDEPTHBOUNDSEXTPROC)func()
  continue;
}

if(strcmp("glBindFramebufferEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindFramebufferEXT");
  (PFNGLBINDFRAMEBUFFEREXTPROC)func()
  continue;
}

if(strcmp("glBindRenderbufferEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindRenderbufferEXT");
  (PFNGLBINDRENDERBUFFEREXTPROC)func()
  continue;
}

if(strcmp("glStringMarkerGREMEDY",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glStringMarkerGREMEDY");
  (PFNGLSTRINGMARKERGREMEDYPROC)func()
  continue;
}

if(strcmp("glBufferParameteriAPPLE",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBufferParameteriAPPLE");
  (PFNGLBUFFERPARAMETERIAPPLEPROC)func()
  continue;
}

if(strcmp("glFlushMappedBufferRangeAPPLE",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFlushMappedBufferRangeAPPLE");
  (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)func()
  continue;
}

if(strcmp("glVertexAttribI1iEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI1iEXT");
  (PFNGLVERTEXATTRIBI1IEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI1uiEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI1uiEXT");
  (PFNGLVERTEXATTRIBI1UIEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI2iEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI2iEXT");
  (PFNGLVERTEXATTRIBI2IEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI2ivEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI2ivEXT");
  (PFNGLVERTEXATTRIBI2IVEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI2uiEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI2uiEXT");
  (PFNGLVERTEXATTRIBI2UIEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI2uivEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI2uivEXT");
  (PFNGLVERTEXATTRIBI2UIVEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI3iEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI3iEXT");
  (PFNGLVERTEXATTRIBI3IEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI3ivEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI3ivEXT");
  (PFNGLVERTEXATTRIBI3IVEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI3uiEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI3uiEXT");
  (PFNGLVERTEXATTRIBI3UIEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI3uivEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI3uivEXT");
  (PFNGLVERTEXATTRIBI3UIVEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI4iEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI4iEXT");
  (PFNGLVERTEXATTRIBI4IEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI4ivEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI4ivEXT");
  (PFNGLVERTEXATTRIBI4IVEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI4uiEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI4uiEXT");
  (PFNGLVERTEXATTRIBI4UIEXTPROC)func()
  continue;
}

if(strcmp("glVertexAttribI4uivEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVertexAttribI4uivEXT");
  (PFNGLVERTEXATTRIBI4UIVEXTPROC)func()
  continue;
}

if(strcmp("glClearColorIiEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearColorIiEXT");
  (PFNGLCLEARCOLORIIEXTPROC)func()
  continue;
}

if(strcmp("glClearColorIuiEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearColorIuiEXT");
  (PFNGLCLEARCOLORIUIEXTPROC)func()
  continue;
}

if(strcmp("glBindBufferOffsetEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBindBufferOffsetEXT");
  (PFNGLBINDBUFFEROFFSETEXTPROC)func()
  continue;
}

if(strcmp("glBeginPerfMonitorAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBeginPerfMonitorAMD");
  (PFNGLBEGINPERFMONITORAMDPROC)func()
  continue;
}

if(strcmp("glDeletePerfMonitorsAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeletePerfMonitorsAMD");
  (PFNGLDELETEPERFMONITORSAMDPROC)func()
  continue;
}

if(strcmp("glEndPerfMonitorAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEndPerfMonitorAMD");
  (PFNGLENDPERFMONITORAMDPROC)func()
  continue;
}

if(strcmp("glGenPerfMonitorsAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGenPerfMonitorsAMD");
  (PFNGLGENPERFMONITORSAMDPROC)func()
  continue;
}

if(strcmp("glGetPerfMonitorCounterDataAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfMonitorCounterDataAMD");
  (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)func()
  continue;
}

if(strcmp("glGetPerfMonitorCounterInfoAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfMonitorCounterInfoAMD");
  (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)func()
  continue;
}

if(strcmp("glGetPerfMonitorCounterStringAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfMonitorCounterStringAMD");
  (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)func()
  continue;
}

if(strcmp("glGetPerfMonitorCountersAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfMonitorCountersAMD");
  (PFNGLGETPERFMONITORCOUNTERSAMDPROC)func()
  continue;
}

if(strcmp("glGetPerfMonitorGroupStringAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfMonitorGroupStringAMD");
  (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)func()
  continue;
}

if(strcmp("glGetPerfMonitorGroupsAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfMonitorGroupsAMD");
  (PFNGLGETPERFMONITORGROUPSAMDPROC)func()
  continue;
}

if(strcmp("glSelectPerfMonitorCountersAMD",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSelectPerfMonitorCountersAMD");
  (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)func()
  continue;
}

if(strcmp("glGetObjectParameterivAPPLE",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetObjectParameterivAPPLE");
  (PFNGLGETOBJECTPARAMETERIVAPPLEPROC)func()
  continue;
}

if(strcmp("glObjectPurgeableAPPLE",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glObjectPurgeableAPPLE");
  (PFNGLOBJECTPURGEABLEAPPLEPROC)func()
  continue;
}

if(strcmp("glObjectUnpurgeableAPPLE",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glObjectUnpurgeableAPPLE");
  (PFNGLOBJECTUNPURGEABLEAPPLEPROC)func()
  continue;
}

if(strcmp("glActiveProgramEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glActiveProgramEXT");
  (PFNGLACTIVEPROGRAMEXTPROC)func()
  continue;
}

if(strcmp("glCreateShaderProgramEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreateShaderProgramEXT");
  (PFNGLCREATESHADERPROGRAMEXTPROC)func()
  continue;
}

if(strcmp("glUseShaderProgramEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glUseShaderProgramEXT");
  (PFNGLUSESHADERPROGRAMEXTPROC)func()
  continue;
}

if(strcmp("glTextureBarrierNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTextureBarrierNV");
  (PFNGLTEXTUREBARRIERNVPROC)func()
  continue;
}

if(strcmp("glVDPAUFiniNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAUFiniNV");
  (PFNGLVDPAUFININVPROC)func()
  continue;
}

if(strcmp("glVDPAUGetSurfaceivNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAUGetSurfaceivNV");
  (PFNGLVDPAUGETSURFACEIVNVPROC)func()
  continue;
}

if(strcmp("glVDPAUInitNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAUInitNV");
  (PFNGLVDPAUINITNVPROC)func()
  continue;
}

if(strcmp("glVDPAUIsSurfaceNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAUIsSurfaceNV");
  (PFNGLVDPAUISSURFACENVPROC)func()
  continue;
}

if(strcmp("glVDPAUMapSurfacesNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAUMapSurfacesNV");
  (PFNGLVDPAUMAPSURFACESNVPROC)func()
  continue;
}

if(strcmp("glVDPAURegisterOutputSurfaceNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAURegisterOutputSurfaceNV");
  (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)func()
  continue;
}

if(strcmp("glVDPAURegisterVideoSurfaceNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAURegisterVideoSurfaceNV");
  (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)func()
  continue;
}

if(strcmp("glVDPAUSurfaceAccessNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAUSurfaceAccessNV");
  (PFNGLVDPAUSURFACEACCESSNVPROC)func()
  continue;
}

if(strcmp("glVDPAUUnmapSurfacesNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAUUnmapSurfacesNV");
  (PFNGLVDPAUUNMAPSURFACESNVPROC)func()
  continue;
}

if(strcmp("glVDPAUUnregisterSurfaceNV",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glVDPAUUnregisterSurfaceNV");
  (PFNGLVDPAUUNREGISTERSURFACENVPROC)func()
  continue;
}

if(strcmp("glBeginPerfQueryINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBeginPerfQueryINTEL");
  (PFNGLBEGINPERFQUERYINTELPROC)func()
  continue;
}

if(strcmp("glCreatePerfQueryINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glCreatePerfQueryINTEL");
  (PFNGLCREATEPERFQUERYINTELPROC)func()
  continue;
}

if(strcmp("glDeletePerfQueryINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDeletePerfQueryINTEL");
  (PFNGLDELETEPERFQUERYINTELPROC)func()
  continue;
}

if(strcmp("glEndPerfQueryINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEndPerfQueryINTEL");
  (PFNGLENDPERFQUERYINTELPROC)func()
  continue;
}

if(strcmp("glGetFirstPerfQueryIdINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetFirstPerfQueryIdINTEL");
  (PFNGLGETFIRSTPERFQUERYIDINTELPROC)func()
  continue;
}

if(strcmp("glGetNextPerfQueryIdINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetNextPerfQueryIdINTEL");
  (PFNGLGETNEXTPERFQUERYIDINTELPROC)func()
  continue;
}

if(strcmp("glGetPerfCounterInfoINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfCounterInfoINTEL");
  (PFNGLGETPERFCOUNTERINFOINTELPROC)func()
  continue;
}

if(strcmp("glGetPerfQueryDataINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfQueryDataINTEL");
  (PFNGLGETPERFQUERYDATAINTELPROC)func()
  continue;
}

if(strcmp("glGetPerfQueryIdByNameINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfQueryIdByNameINTEL");
  (PFNGLGETPERFQUERYIDBYNAMEINTELPROC)func()
  continue;
}

if(strcmp("glGetPerfQueryInfoINTEL",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetPerfQueryInfoINTEL");
  (PFNGLGETPERFQUERYINFOINTELPROC)func()
  continue;
}

if(strcmp("glPolygonOffsetClampEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPolygonOffsetClampEXT");
  (PFNGLPOLYGONOFFSETCLAMPEXTPROC)func()
  continue;
}

if(strcmp("glWindowRectanglesEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glWindowRectanglesEXT");
  (PFNGLWINDOWRECTANGLESEXTPROC)func()
  continue;
}

if(strcmp("glStencilFuncSeparateATI",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glStencilFuncSeparateATI");
  (PFNGLSTENCILFUNCSEPARATEATIPROC)func()
  continue;
}

if(strcmp("glProgramEnvParameters4fvEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramEnvParameters4fvEXT");
  (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)func()
  continue;
}

if(strcmp("glProgramLocalParameters4fvEXT",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glProgramLocalParameters4fvEXT");
  (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)func()
  continue;
}

if(strcmp("glEGLImageTargetRenderbufferStorageOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEGLImageTargetRenderbufferStorageOES");
  (PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC)func()
  continue;
}

if(strcmp("glEGLImageTargetTexture2DOES",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glEGLImageTargetTexture2DOES");
  (PFNGLEGLIMAGETARGETTEXTURE2DOESPROC)func()
  continue;
}

if(strcmp("glAlphaFuncx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glAlphaFuncx");
  (PFNGLALPHAFUNCXPROC)func()
  continue;
}

if(strcmp("glClearColorx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearColorx");
  (PFNGLCLEARCOLORXPROC)func()
  continue;
}

if(strcmp("glClearDepthx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClearDepthx");
  (PFNGLCLEARDEPTHXPROC)func()
  continue;
}

if(strcmp("glColor4x",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glColor4x");
  (PFNGLCOLOR4XPROC)func()
  continue;
}

if(strcmp("glDepthRangex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glDepthRangex");
  (PFNGLDEPTHRANGEXPROC)func()
  continue;
}

if(strcmp("glFogx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogx");
  (PFNGLFOGXPROC)func()
  continue;
}

if(strcmp("glFogxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFogxv");
  (PFNGLFOGXVPROC)func()
  continue;
}

if(strcmp("glFrustumf",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFrustumf");
  (PFNGLFRUSTUMFPROC)func()
  continue;
}

if(strcmp("glFrustumx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glFrustumx");
  (PFNGLFRUSTUMXPROC)func()
  continue;
}

if(strcmp("glLightModelx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightModelx");
  (PFNGLLIGHTMODELXPROC)func()
  continue;
}

if(strcmp("glLightModelxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightModelxv");
  (PFNGLLIGHTMODELXVPROC)func()
  continue;
}

if(strcmp("glLightx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightx");
  (PFNGLLIGHTXPROC)func()
  continue;
}

if(strcmp("glLightxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLightxv");
  (PFNGLLIGHTXVPROC)func()
  continue;
}

if(strcmp("glLineWidthx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLineWidthx");
  (PFNGLLINEWIDTHXPROC)func()
  continue;
}

if(strcmp("glLoadMatrixx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glLoadMatrixx");
  (PFNGLLOADMATRIXXPROC)func()
  continue;
}

if(strcmp("glMaterialx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMaterialx");
  (PFNGLMATERIALXPROC)func()
  continue;
}

if(strcmp("glMaterialxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMaterialxv");
  (PFNGLMATERIALXVPROC)func()
  continue;
}

if(strcmp("glMultMatrixx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultMatrixx");
  (PFNGLMULTMATRIXXPROC)func()
  continue;
}

if(strcmp("glMultiTexCoord4x",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glMultiTexCoord4x");
  (PFNGLMULTITEXCOORD4XPROC)func()
  continue;
}

if(strcmp("glNormal3x",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glNormal3x");
  (PFNGLNORMAL3XPROC)func()
  continue;
}

if(strcmp("glOrthof",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glOrthof");
  (PFNGLORTHOFPROC)func()
  continue;
}

if(strcmp("glOrthox",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glOrthox");
  (PFNGLORTHOXPROC)func()
  continue;
}

if(strcmp("glPointSizex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointSizex");
  (PFNGLPOINTSIZEXPROC)func()
  continue;
}

if(strcmp("glPolygonOffsetx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPolygonOffsetx");
  (PFNGLPOLYGONOFFSETXPROC)func()
  continue;
}

if(strcmp("glRotatex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glRotatex");
  (PFNGLROTATEXPROC)func()
  continue;
}

if(strcmp("glSampleCoveragex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glSampleCoveragex");
  (PFNGLSAMPLECOVERAGEXPROC)func()
  continue;
}

if(strcmp("glScalex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glScalex");
  (PFNGLSCALEXPROC)func()
  continue;
}

if(strcmp("glTexEnvx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexEnvx");
  (PFNGLTEXENVXPROC)func()
  continue;
}

if(strcmp("glTexEnvxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexEnvxv");
  (PFNGLTEXENVXVPROC)func()
  continue;
}

if(strcmp("glTexParameterx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexParameterx");
  (PFNGLTEXPARAMETERXPROC)func()
  continue;
}

if(strcmp("glTranslatex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTranslatex");
  (PFNGLTRANSLATEXPROC)func()
  continue;
}

if(strcmp("glClipPlanef",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClipPlanef");
  (PFNGLCLIPPLANEFPROC)func()
  continue;
}

if(strcmp("glClipPlanex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glClipPlanex");
  (PFNGLCLIPPLANEXPROC)func()
  continue;
}

if(strcmp("glGetClipPlanef",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetClipPlanef");
  (PFNGLGETCLIPPLANEFPROC)func()
  continue;
}

if(strcmp("glGetClipPlanex",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetClipPlanex");
  (PFNGLGETCLIPPLANEXPROC)func()
  continue;
}

if(strcmp("glGetFixedv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetFixedv");
  (PFNGLGETFIXEDVPROC)func()
  continue;
}

if(strcmp("glGetLightxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetLightxv");
  (PFNGLGETLIGHTXVPROC)func()
  continue;
}

if(strcmp("glGetMaterialxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetMaterialxv");
  (PFNGLGETMATERIALXVPROC)func()
  continue;
}

if(strcmp("glGetTexEnvxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexEnvxv");
  (PFNGLGETTEXENVXVPROC)func()
  continue;
}

if(strcmp("glGetTexParameterxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glGetTexParameterxv");
  (PFNGLGETTEXPARAMETERXVPROC)func()
  continue;
}

if(strcmp("glPointParameterx",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointParameterx");
  (PFNGLPOINTPARAMETERXPROC)func()
  continue;
}

if(strcmp("glPointParameterxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPointParameterxv");
  (PFNGLPOINTPARAMETERXVPROC)func()
  continue;
}

if(strcmp("glTexParameterxv",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glTexParameterxv");
  (PFNGLTEXPARAMETERXVPROC)func()
  continue;
}

if(strcmp("glBlendBarrier",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glBlendBarrier");
  (PFNGLBLENDBARRIERPROC)func()
  continue;
}

if(strcmp("glPrimitiveBoundingBox",call_name)==0){
  func = glXGetProcAddress((const GLubyte*)"glPrimitiveBoundingBox");
  (PFNGLPRIMITIVEBOUNDINGBOXPROC)func()
  continue;
}